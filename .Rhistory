summary(ComplexModel_log_lot)
ComplexModel_log_lot_data <- broom::augment(ComplexModel_log_lot)
ComplexModel_log_lot <- lm(data = trainFiltered,LogSalePrice ~ TotalBsmtSF + GrLivArea + logLotArea + TotalBath + Tier1 + Tier2 + Tier3 + Tier4)
summary(ComplexModel_log_lot)
ComplexModel_log_lot_data <- broom::augment(ComplexModel_log_lot)
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, 3, byrow = TRUE))
qqnorm(ComplexModel_log_lot_data$.resid)
qqline(ComplexModel_log_lot_data$.resid)
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$LotArea, xlab = 'Lot Area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$LotArea, xlab = 'Lot Area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$TotalBsmtSF, xlab = 'Total basement area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$GrLivArea, xlab = 'Above grade living area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$TotalBath, xlab = 'Total bathrooms', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier1, xlab = 'Tier 1 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier2, xlab = 'Tier 2 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier3, xlab = 'Tier 3 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier4, xlab = 'Tier 4 Neighborhood', ylab= 'Residuals')
ComplexModel_log_lot_data$LotArea
ayout(matrix(c(1,2,3,4,5,6,7,8,9), 3, 3, byrow = TRUE))
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, 3, byrow = TRUE))
qqnorm(ComplexModel_log_lot_data$.resid)
qqline(ComplexModel_log_lot_data$.resid)
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$logLotArea, xlab = 'Lot Area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$TotalBsmtSF, xlab = 'Total basement area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$GrLivArea, xlab = 'Above grade living area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$TotalBath, xlab = 'Total bathrooms', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier1, xlab = 'Tier 1 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier2, xlab = 'Tier 2 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier3, xlab = 'Tier 3 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier4, xlab = 'Tier 4 Neighborhood', ylab= 'Residuals')
ComplexModel_log_lot <- lm(data = trainFiltered,LogSalePrice ~ TotalBsmtSF + GrLivArea + logLotArea + TotalBath + Tier1 + Tier2 + Tier3 + Tier4)
summary(ComplexModel_log_lot)
ComplexModel_log_lot_data <- broom::augment(ComplexModel_log_lot)
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, 3, byrow = TRUE))
qqnorm(ComplexModel_log_lot_data$.resid)
qqline(ComplexModel_log_lot_data$.resid)
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$logLotArea, xlab = 'Lot Area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$TotalBsmtSF, xlab = 'Total basement area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$GrLivArea, xlab = 'Above grade living area', ylab= 'Residuals')
plot(y = ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$TotalBath, xlab = 'Total bathrooms', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier1, xlab = 'Tier 1 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier2, xlab = 'Tier 2 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier3, xlab = 'Tier 3 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_log_lot_data$.resid, x = ComplexModel_log_lot_data$Tier4, xlab = 'Tier 4 Neighborhood', ylab= 'Residuals')
ComplexModel_log_lot <- lm(data = trainFiltered,LogSalePrice ~ TotalBsmtSF + GrLivArea + logLotArea + TotalBath + Tier1 + Tier2 + Tier3 + Tier4)
summary(ComplexModel_log_lot)
ComplexModel_log_lot_data <- broom::augment(ComplexModel_log_lot)
FtestsComplexModel_log_lot <- broom::glance(ComplexModel_log_lot)
ComplexModel_log_lot_data$SalePrice <- trainFiltered$SalePrice
ComplexModel_log_lot_data$AntiLogFitted <- 10^(ComplexModel_log_lot_data$.fitted)
MAE_Complex_log_lot <- mean(abs(ComplexModel_log_lot_data$SalePrice - ComplexModel_log_lot_data$AntiLogFitted))
ComplexModels <- c("SalePrice = 7.17e+04 + 5.681e+01*TotalBsmtSF + 6.3e+01*GrLivArea + 8.22e-01*LotArea + 1.11e+04*TotalBath - 1.14e+05*Tier1 - 9.57e+04*Tier2 - 7.44e+04*Tier3 - 2.9e+04* Tier4","Log(Sale Price) = 4.979e+00 + 1e-04*TotalBsmtSF + 1.236e-04*GrLivArea + 1.251e-06*LotArea + 2.809e-02*TotalBath - 2.160e-01*Tier1 - 1.585e-01*Tier2 - 9.391e-02*Tier3 - 2.740e-02*Tier4",'Log(Sale Price) = 4.716e+00 + TotalBsmtSF*1.037e-04 + GrLivArea*1.181e-04 + log(LotArea)*7.309e-02 + TotalBath*2.847e-02 - Tier1*2.180e-01 - Tier2*1.654e-01 - Tier3*9.951e-02 - Tier4*3.200e-02')
ComplexMAEs <- c(MAE_Complex,MAE_Complex_log,MAE_Complex_log_lot)
ComplexRSquared <- c(FtestsComplexModel$adj.r.squared,FtestsComplexModel_log$adj.r.squared,FtestsComplexModel_log_lot$adj.r.squared)
ComplexModels <- c("SalePrice = 7.17e+04 + 5.681e+01*TotalBsmtSF + 6.3e+01*GrLivArea + 8.22e-01*LotArea + 1.11e+04*TotalBath - 1.14e+05*Tier1 - 9.57e+04*Tier2 - 7.44e+04*Tier3 - 2.9e+04* Tier4","Log(Sale Price) = 4.979e+00 + 1e-04*TotalBsmtSF + 1.236e-04*GrLivArea + 1.251e-06*LotArea + 2.809e-02*TotalBath - 2.160e-01*Tier1 - 1.585e-01*Tier2 - 9.391e-02*Tier3 - 2.740e-02*Tier4",'Log(Sale Price) = 4.716e+00 + TotalBsmtSF*1.037e-04 + GrLivArea*1.181e-04 + log(LotArea)*7.309e-02 + TotalBath*2.847e-02 - Tier1*2.180e-01 - Tier2*1.654e-01 - Tier3*9.951e-02 - Tier4*3.200e-02')
ComplexMAEs <- c(MAE_Complex,MAE_Complex_log,MAE_Complex_log_lot)
ComplexRSquared <- c(FtestsComplexModel$adj.r.squared,FtestsComplexModel_log$adj.r.squared,FtestsComplexModel_log_lot$adj.r.squared)
ComplexFstat <- c(FtestsComplexModel$statistic, FtestsComplexModel_log$statistic,FtestsComplexModel_log_lot$statistic)
ComplexPvalues <- c(FtestsComplexModel$p.value,FtestsComplexModel_log$p.value,FtestsComplexModel_log_lot$p.value)
CompariosnComplex <- data.frame(ComplexModels,ComplexMAEs,ComplexRSquared,ComplexFstat,ComplexPvalues)
colnames(CompariosnComplex) <- c("Model","MAE","Adj.R^2","F.Stat","P.Value")
pander::pandoc.table(CompariosnComplex,caption = "Comparison of MLR models of Sale Price and Log(Sale Price)")
## Create table for comparing models
Models <- c("SalePrice = 126.9 * GrLivArea","SalePrice = 47859.31 + 129.96 * TotalBsmtSF","-502244.02 + 84.11 * TotalBsmtSF + 97.608 * GrLivArea")
MSres <- c(round(FtestsSLR_GrLivArea$sigma,2),round(FTestsSLR_BsmtArea$sigma,2),round(FtestsMLR$sigma,2))
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=60),tidy=TRUE)
ames <- readr::read_delim(file = 'ames_housing_data.csv', delim = ",")
# chamge from scientic notations, to restore to default options(scipen = 0)
options(scipen = 999)
library(magrittr)
LivingAreaCutoff <- 800
# Adding drop conditions varaible
# insert dummy variable to code SaleCondition being either equal to 'Normal' or 'Partial'
ames$Sale_NrmPar <- ifelse(ames$SaleCondition == 'Normal' | ames$SaleCondition == 'Partial', 1,0)
ames$DropCondition <- ifelse(ames$Zoning!='RL','01: Not LowDensityZone',
ifelse(ames$Sale_NrmPar == 0,'02: Not Normal/Partial Sale',
ifelse(ames$Street!='Pave','03: Street Not Paved',
ifelse(ames$GrLivArea <LivingAreaCutoff,'04: Less than 800 SqFt',
ifelse(ames$TotalBsmtSF <1,'05: No Basement',
'99: Eligible Sample')
))))
# Waterfall
waterfall <- ames %>%
dplyr::group_by(DropCondition) %>%
dplyr::summarise(counts=n())
# Print waterfall table
knitr::kable(waterfall, align = c("l", "r"),caption = "Drop waterfall")
# Define training portion of the data
trainPercent <- round(0.7,1)
# Columns of interest
colsofinterest <- c('SID'
,'LotArea'
, 'LotConfig'
, 'Neighborhood'
, 'BldgType'
, 'HouseStyle'
, 'OverallCond'
, 'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'BsmtFullBath'
, 'BsmtHalfBath'
, 'FullBath'
, 'HalfBath'
, 'BedroomAbvGr'
, 'KitchenQual'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'MoSold'
, 'YrSold'
, 'SaleCondition'
, 'SalePrice'
, 'FirstFlrSF'
, 'SecondFlrSF')
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing.
colsmatrix <- matrix(colsofinterest[2:length(colsofinterest)],ncol = 3)
# printing on pdf
knitr::kable(colsmatrix, caption = "Variables of interest")
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath) %>%
dplyr::mutate(TotalSQFT = TotalBsmtSF + FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(SQFTNoBsmt = FirstFlrSF + SecondFlrSF)
# training set
train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
train <- train %>% dplyr::arrange(SID)
# Validation set
Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set"), Samples = c(nrow(train),nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
# Multicolinearity exploration
test <- SampleFrame[,c('SalePrice','TotalBsmtSF','GarageArea', 'GrLivArea', 'LotArea', 'TotalBath')]
pairs(test)
# Plot of basement area vs sale price
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
# annotation addition
BasementArea <- BasementArea + annotate("text", x = 2000, y = 700000, label = paste0("correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
# Restrict basment to < 2500
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
# Basement < 2500 vs SalePrice
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
# Annotations
RestrictedBasement <- RestrictedBasement +  annotate("text", x = 1500, y = 700000, label = paste0("correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
# Print plot
grid.arrange(BasementArea, RestrictedBasement, ncol = 2)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted, ncol = 2)
RestGarageVsLivArea <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = GrLivArea)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = GrLivArea), se = T) + theme_bw()
RestGarageVsLivArea <- RestGarageVsLivArea + annotate("text",x = 250, y = 3000,label = paste0("Correlation = ",round(cor(RestrictedLivingGarageArea$GarageArea,RestrictedLivingGarageArea$GrLivArea),2)))
RestGarageVsBsmt <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = TotalBsmtSF)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = TotalBsmtSF), se = T) + theme_bw()
RestGarageVsBsmt <- RestGarageVsBsmt + annotate("text",x = 250, y = 3000,label = paste0("Correlation = ",round(cor(RestrictedLivingGarageArea$GarageArea,RestrictedLivingGarageArea$TotalBsmtSF),2)))
grid.arrange(RestGarageVsLivArea,RestGarageVsBsmt, nrow=2)
options(scipen = 0)
# Filtering Living Area < 4000 and Garage area < 1000 and creating additional variable of LogSalePrice in preparation of the next section.
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000) %>%
dplyr::mutate(LogSalePrice = log10(SalePrice))
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,2,3,3),2,2, byrow = TRUE))
hist(RedDf$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(RedDf$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(RedDf$.resid)
plot(RedDf$GrLivArea,RedDf$.resid,main = "Residuals vs Living Area", xlab = "Above grade living area", ylab = "Residuals")
# No intercept model
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
# print model
summary(SLR_LivingArea_NoIntercept)
# Model diagnostics
ResdfNI <- broom::augment(SLR_LivingArea_NoIntercept)
FtestsSLR_GrLivArea <- broom::glance(SLR_LivingArea_NoIntercept)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfNI$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfNI$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfNI$.resid)
plot(ResdfNI$GrLivArea,ResdfNI$.resid,main = "Residuals vs Living Area", xlab = "Above grade living area", ylab = "Residuals")
SLR_BsmtArea <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF)
print(summary(SLR_BsmtArea), caption = 'ANOVA Simple Linear Regression Total basment area')
# Model diagnostics
# Tidy store of model results
ResdfBsmt <- broom::augment(SLR_BsmtArea)
FTestsSLR_BsmtArea <- broom::glance(SLR_BsmtArea)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfBsmt$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfBsmt$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfBsmt$.resid)
plot(ResdfBsmt$TotalBsmtSF,ResdfBsmt$.resid,main = "Residuals vs Total basement Area", xlab = "Total Basement area", ylab = "Residuals")
MLR <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF + GrLivArea)
print(summary(MLR), caption = 'ANOVA Multiple Linear Regression Total basment area')
# Model diagnostics
# Tidy store of model results
MLR_Model <- broom::augment(MLR)
FtestsMLR <- broom::glance(MLR)
# Plot of residuals
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
hist(MLR_Model$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(MLR_Model$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(MLR_Model$.resid)
plot(MLR_Model$TotalBsmtSF,MLR_Model$.resid,main = "Residuals vs Total basement Area", xlab = "Total Basement area", ylab = "Residuals")
plot(MLR_Model$GrLivArea,MLR_Model$.resid,main = "Residuals vs Living Area", xlab = "Living Area above grade", ylab = "Residuals")
## Create table for comparing models
Models <- c("SalePrice = 126.9 * GrLivArea","SalePrice = 47859.31 + 129.96 * TotalBsmtSF","-502244.02 + 84.11 * TotalBsmtSF + 97.608 * GrLivArea")
MSres <- c(round(FtestsSLR_GrLivArea$sigma,2),round(FTestsSLR_BsmtArea$sigma,2),round(FtestsMLR$sigma,2))
F_Stat <- c(round(FtestsSLR_GrLivArea$statistic,2),round(FTestsSLR_BsmtArea$statistic,2), round(FtestsMLR$statistic,2))
P_Value <- c(round(FtestsSLR_GrLivArea$p.value,2),round(FTestsSLR_BsmtArea$p.value,2), round(FtestsMLR$p.value,2))
Adj_R_Squared <- c(round(FtestsSLR_GrLivArea$adj.r.squared,2),round(FTestsSLR_BsmtArea$adj.r.squared,2), round(FtestsMLR$adj.r.squared,2))
Normality <- c("Satisfied thick pen test; heavy tails","Satisfied thick pen test; heavy tails","Satisfied thick pen test; heavy tails")
ResidualPattern <- c("Funnel shaped", "Funnel shaped", "Funnel shaped")
FigureRef <- c(6,7,8)
# Comparisondf <- cbind(Models,MSres,F_Stat,P_Value,Adj_R_Squared,Normality,ResidualPattern)
# colnames(Comparisondf) <- c("Model","MSres","F Stat","P Value", "Adj R^2", "Residuals Normality", "Residuals Pattern")
Comparisondf <- cbind(Models,MSres,F_Stat,P_Value,Adj_R_Squared,FigureRef)
colnames(Comparisondf) <- c("Model","MSres","F Stat","P Value", "Adj R^2","Figure reference")
# print table
knitr::kable(Comparisondf,caption = "Model comparison")
# pander::pander(Comparisondf)
## Create table for comparing models
Models <- c("SalePrice = 126.9 * GrLivArea","SalePrice = 47859.31 + 129.96 * TotalBsmtSF","-502244.02 + 84.11 * TotalBsmtSF + 97.608 * GrLivArea")
MSres <- c(round(FtestsSLR_GrLivArea$sigma,2),round(FTestsSLR_BsmtArea$sigma,2),round(FtestsMLR$sigma,2))
F_Stat <- c(round(FtestsSLR_GrLivArea$statistic,2),round(FTestsSLR_BsmtArea$statistic,2), round(FtestsMLR$statistic,2))
P_Value <- c(round(FtestsSLR_GrLivArea$p.value,2),round(FTestsSLR_BsmtArea$p.value,2), round(FtestsMLR$p.value,2))
Adj_R_Squared <- c(round(FtestsSLR_GrLivArea$adj.r.squared,2),round(FTestsSLR_BsmtArea$adj.r.squared,2), round(FtestsMLR$adj.r.squared,2))
Normality <- c("Satisfied thick pen test; heavy tails","Satisfied thick pen test; heavy tails","Satisfied thick pen test; heavy tails")
ResidualPattern <- c("Funnel shaped", "Funnel shaped", "Funnel shaped")
FigureRef <- c(6,7,8)
# Comparisondf <- cbind(Models,MSres,F_Stat,P_Value,Adj_R_Squared,Normality,ResidualPattern)
# colnames(Comparisondf) <- c("Model","MSres","F Stat","P Value", "Adj R^2", "Residuals Normality", "Residuals Pattern")
Comparisondf <- cbind(Models,MSres,F_Stat,P_Value,Adj_R_Squared,FigureRef)
colnames(Comparisondf) <- c("Model","MSres","F Stat","P Value", "Adj R^2","Fig#_Reference")
# print table
knitr::kable(Comparisondf,caption = "Model comparison")
# pander::pander(Comparisondf)
dir()
home
HOME
cd..
dir(~)
dir('~')
profsalary <- read.table(file = '~/Documents/MSAP/PREDICT 410/Data/profsalary.txt')
profsalary <- read.table(file = '~/Documents/MSPA/PREDICT 410/Data/profsalary.txt')
profsalary <- read.table(file = '~/Documents/MSPA/PREDICT 410/Data/profsalary.txt',header = T)
travel <- read.table(file = '~/Documents/MSPA/PREDICT 410/Data/travel.txt',header = T)
attach(travel)
mfull <- lm(Amount~Age+C+C:Age)
summary(mfull)
mreduced <- lm(Amount~Age)
summary(mreduced)
237.7^2 * 923
anova(mreduced)
amova(mfull)
anova(mfull)
SSHbyr <- (52158945-2089377)/2
MSE <- 2089377/(925-4)
Fstat <- SSHbyr/MSE
Fstat
anova(mreduced,mfull)
detach(travel)
detach(profsalary)
anscombe
knitr::opts_chunk$set(echo = F,tidy.opts=list(width.cutoff=60),tidy=TRUE)
ames <- readr::read_delim(file = 'ames_housing_data.csv', delim = ",")
LivingAreaCutoff <- 800
ames$Sale_NrmPar <- ifelse(ames$SaleCondition == 'Normal' | ames$SaleCondition == 'Partial', 1,0)
ames$DropCondition <- ifelse(ames$Zoning!='RL','01: Not LowDensityZone',
ifelse(ames$Sale_NrmPar == 0,'02: Not Normal/Partial Sale',
ifelse(ames$Street!='Pave','03: Street Not Paved',
ifelse(ames$GrLivArea <LivingAreaCutoff,'04: Less than 800 SqFt',
ifelse(ames$TotalBsmtSF <1,'05: No Basement',
ifelse(ames$GrLivArea > 4000, '06: Greater 4000 sqft living Area - Influence Points',
ifelse(GarageArea > 1000, '07:Garage area greater than 1000 sqft - Influence points',
'99: Eligible Sample')
))))))
ames$DropCondition <- ifelse(ames$Zoning!='RL','01: Not LowDensityZone',
ifelse(ames$Sale_NrmPar == 0,'02: Not Normal/Partial Sale',
ifelse(ames$Street!='Pave','03: Street Not Paved',
ifelse(ames$GrLivArea <LivingAreaCutoff,'04: Less than 800 SqFt',
ifelse(ames$TotalBsmtSF <1,'05: No Basement',
ifelse(ames$GrLivArea > 4000, '06: Greater 4000 sqft living Area - Influence Points',
ifelse(ames$GarageArea > 1000, '07:Garage area greater than 1000 sqft - Influence points',
'99: Eligible Sample')
))))))
waterfall <- ames %>%
dplyr::group_by(DropCondition) %>%
dplyr::summarise(counts=n())
options(scipen = 999)
library(magrittr)
waterfall <- ames %>%
dplyr::group_by(DropCondition) %>%
dplyr::summarise(counts=n())
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
# Print waterfall table
knitr::kable(waterfall, align = c("l", "r"),caption = "Drop waterfall")
# Define training portion of the data
trainPercent <- round(0.7,1)
# Columns of interest
colsofinterest <- c('SID'
,'LotArea'
, 'LotConfig'
, 'Neighborhood'
, 'BldgType'
, 'HouseStyle'
, 'OverallCond'
, 'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'BsmtFullBath'
, 'BsmtHalfBath'
, 'FullBath'
, 'HalfBath'
, 'BedroomAbvGr'
, 'KitchenQual'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'MoSold'
, 'YrSold'
, 'SaleCondition'
, 'SalePrice'
, 'FirstFlrSF'
, 'SecondFlrSF')
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath) %>%
dplyr::mutate(TotalSQFT = TotalBsmtSF + FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(SQFTNoBsmt = FirstFlrSF + SecondFlrSF)
# training set
train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
train <- train %>% dplyr::arrange(SID)
# Validation set
Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set"), Samples = c(nrow(train),nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath) %>%
dplyr::mutate(TotalSQFT = TotalBsmtSF + FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(SQFTNoBsmt = FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(QualityIndex = OverallQual*OverallCond)
# Print waterfall table
knitr::kable(waterfall, align = c("l", "r"),caption = "Drop waterfall")
# Define training portion of the data
trainPercent <- round(0.7,1)
# Columns of interest
colsofinterest <- c('SID'
,'LotArea'
, 'LotConfig'
, 'Neighborhood'
, 'BldgType'
, 'HouseStyle'
, 'OverallCond'
, 'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'BsmtFullBath'
, 'BsmtHalfBath'
, 'FullBath'
, 'HalfBath'
, 'BedroomAbvGr'
, 'KitchenQual'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'MoSold'
, 'YrSold'
, 'SaleCondition'
, 'SalePrice'
, 'FirstFlrSF'
, 'SecondFlrSF'
, 'OverallQual')
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath) %>%
dplyr::mutate(TotalSQFT = TotalBsmtSF + FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(SQFTNoBsmt = FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(QualityIndex = OverallQual*OverallCond)
# training set
train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
train <- train %>% dplyr::arrange(SID)
# Validation set
Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set","Total"), Samples = c(nrow(train),nrow(Validation),nrow(train) + nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
??AIC
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath) %>%
dplyr::mutate(TotalSQFT = TotalBsmtSF + FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(SQFTNoBsmt = FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(QualityIndex = OverallQual*OverallCond) %>%
dplyr::mutate(u = runif(nrow(SampleFrame)))
train <- subset(SampleFrame , u < 0.7)
train <- train %>% dplyr::arrange(SID)
Validation <- subset(SampleFrame, u > 0.7)
Validation <- Validation %>% dplyr::arrange(SID)
df <- cbind(Data = c("Training set", "Validation set","Total"), Samples = c(nrow(train),nrow(Validation),nrow(train) + nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Print waterfall table
knitr::kable(waterfall, align = c("l", "r"),caption = "Drop waterfall")
# Define training portion of the data
trainPercent <- round(0.7,1)
# Columns of interest
colsofinterest <- c('SID'
,'LotArea'
, 'LotConfig'
, 'Neighborhood'
, 'BldgType'
, 'HouseStyle'
, 'OverallCond'
, 'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'BsmtFullBath'
, 'BsmtHalfBath'
, 'FullBath'
, 'HalfBath'
, 'BedroomAbvGr'
, 'KitchenQual'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'MoSold'
, 'YrSold'
, 'SaleCondition'
, 'FirstFlrSF'
, 'SecondFlrSF'
, 'SalePrice')
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing.
colsmatrix <- matrix(colsofinterest[2:length(colsofinterest)-1],ncol = 3)
# printing on pdf
knitr::kable(colsmatrix, caption = "Variables of interest")
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing.
colsmatrix <- matrix(colsofinterest[2:length(colsofinterest)-1],ncol = 4)
# printing on pdf
knitr::kable(colsmatrix, caption = "Variables of interest")
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing.
colsmatrix <- matrix(colsofinterest[2:length(colsofinterest)-2],ncol = 4)
# printing on pdf
knitr::kable(colsmatrix, caption = "Variables of interest")
colsofinterest[2:length(colsofinterest)-2]
colsofinterest
colsofinterest[2:length(colsofinterest)-2]
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing.
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing.
test
test <- colsofinterest[2:length(colsofinterest)-2]
test
test <- colsofinterest[4:length(colsofinterest)-2]
test
test <- colsofinterest[1:length(colsofinterest)-2]
test <- colsofinterest[1:length(colsofinterest)]
test
test <- colsofinterest[2:length(colsofinterest)]
test
test <- colsofinterest[2:length(colsofinterest)-2]
test
test <- colsofinterest[2:length(colsofinterest)-2]
test <- colsofinterest[2:length(colsofinterest)-2]
test
length(colsofinterest)
test <- colsofinterest[2:length(colsofinterest)-2]
test
colsofinterest[2:length(colsofinterest)]
test <- colsofinterest[2:length(colsofinterest)]
colsmatrix <- matrix(test,ncol = 4)
colsmatrix <- matrix(test,ncol = 2)
knitr::kable(colsmatrix, caption = "Variables of interest")
colsmatrix <- matrix(test,ncol = 3)
colsmatrix <- matrix(test,ncol = 3)
NeighborhoodGrps <- SampleFrame %>%
dplyr::group_by(Neighborhood) %>%
dplyr:: select(Neighborhood,SalePrice,TotalSQFT)
NeighborhoodGrps
NeighborhoodGrps <- SampleFrame %>%
dplyr:: select(Neighborhood,SalePrice,TotalSQFT) %>%
dplyr::group_by(Neighborhood) %>%
dplyr::summarise(TotalSalePrice = sum(SalePrice), Total.SQFT = sum(TotalSQFT),PricePerSqFt = TotalSalePrice/Total.SQFT)
NeighborhoodGrps
View(NeighborhoodGrps)
levels(SampleFrame$BldgType)
unique(SampleFrame$BldgType)
