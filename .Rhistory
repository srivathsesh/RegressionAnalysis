# Validation set
Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set"), Samples = c(nrow(train),nrow(Validation)))
knitr::kable(df)
library(ggplot2)
ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
ames <- readr::read_delim(file = 'ames_housing_data.csv', delim = ",")
# chamge from scientic notations, to restore to default options(scipen = 0)
options(scipen = 999)
library(magrittr)
LivingAreaCutoff <- 800
# Adding drop conditions varaible
# insert dummy variable to code SaleCondition being either equal to 'Normal' or 'Partial'
ames$Sale_NrmPar <- ifelse(ames$SaleCondition == 'Normal' | ames$SaleCondition == 'Partial', 1,0)
ames$DropCondition <- ifelse(ames$Zoning!='RL','01: Not LowDensityZone',
ifelse(ames$Sale_NrmPar == 0,'02: Not Normal/Partial Sale',
ifelse(ames$Street!='Pave','03: Street Not Paved',
ifelse(ames$GrLivArea <LivingAreaCutoff,'04: Less than 800 SqFt',
ifelse(ames$TotalBsmtSF <1,'05: No Basement',
'99: Eligible Sample')
))))
# Waterfall
waterfall <- ames %>%
dplyr::group_by(DropCondition) %>%
dplyr::summarise(counts=n())
# Print waterfall table
knitr::kable(waterfall, align = c("l", "r"),caption = "Drop waterfall")
# Define training portion of the data
trainPercent <- round(0.7,1)
# Columns of interest
colsofinterest <- c('SID'
,'LotArea'
, 'LotConfig'
, 'Neighborhood'
, 'BldgType'
, 'HouseStyle'
, 'OverallCond'
, 'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'BsmtFullBath'
, 'BsmtHalfBath'
, 'FullBath'
, 'HalfBath'
, 'BedroomAbvGr'
, 'KitchenQual'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'MoSold'
, 'YrSold'
, 'SaleCondition'
, 'SalePrice')
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing.
colsmatrix <- matrix(colsofinterest[2:length(colsofinterest)],ncol = 3)
# printing on pdf
knitr::kable(colsmatrix, caption = "Variables of interest")
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
# training set
train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
train <- train %>% dplyr::arrange(SID)
# Validation set
Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set"), Samples = c(nrow(train),nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
library(ggplot2)
ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
library(ggplot2)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
RestrictedBsmtSF <- SampleFrame %>%
filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
library(ggplot2)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
library(ggplot2)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
grid.arrange(BasementArea, RestrictedBasement, ncol = 2)
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
grid.arrange(BasementArea, RestrictedBasement, ncol = 2)
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw() + annotate("text",x = 2500, y= 700000,label = paste0("Pearson correlation = ",cor(x = TotalBsmtSF, y = SalePrice)))
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Total basement area') + theme_bw() + annotate("text",x = 2500, y= 700000,label = paste0("Pearson correlation = ",cor(x = TotalBsmtSF, y = SalePrice)))
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
# training set
train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
train <- train %>% dplyr::arrange(SID)
# Validation set
Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set"), Samples = c(nrow(train),nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Total basement area') + theme_bw() + annotate("text",x = 2500, y= 700000,label = paste0("Pearson correlation = ",cor(x = TotalBsmtSF, y = SalePrice)))
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
grid.arrange(BasementArea, RestrictedBasement, ncol = 2)
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
BasementArea <- BasementArea + annotate("text", x = 2000, y = 700000, label = paste0("Pearson correlation = ",cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice)))
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
grid.arrange(BasementArea, RestrictedBasement, ncol = 2)
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
BasementArea <- BasementArea + annotate("text", x = 2000, y = 700000, label = paste0("Pearson correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
grid.arrange(BasementArea, RestrictedBasement, ncol = 2)
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
BasementArea <- BasementArea + annotate("text", x = 2000, y = 700000, label = paste0("Pearson correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
RestrictedBasement <- RestrictedBasement + + annotate("text", x = 2000, y = 700000, label = paste0("Pearson correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
BasementArea <- BasementArea + annotate("text", x = 2000, y = 700000, label = paste0("Pearson correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
RestrictedBasement <- RestrictedBasement +  annotate("text", x = 2000, y = 700000, label = paste0("Pearson correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
grid.arrange(BasementArea, RestrictedBasement, ncol = 2)
test <- SampleFrame[,c('SalePrice','TotalBsmtSF','GarageArea', 'GrLivArea', 'LotArea')]
pairs(test)
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath)
# training set
train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
train <- train %>% dplyr::arrange(SID)
# Validation set
Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set"), Samples = c(nrow(train),nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
test <- SampleFrame[,c('SalePrice','TotalBsmtSF','GarageArea', 'GrLivArea', 'LotArea', 'TotalBath')]
pairs(test)
# Multicolinearity exploration
test <- SampleFrame[,c('SalePrice','TotalBsmtSF','GarageArea', 'GrLivArea', 'LotArea', 'TotalBath')]
pairs(test)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea, ncol = 2)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea, ncol = 2)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea, ncol = 4)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted ncol = 2)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted, ncol = 2)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted, ncol = 2)
GargeAreaVsLivAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = GrLivArea)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = GrLivArea), se = T) + theme_bw()
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted, ncol = 2)
ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = GrLivArea)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = GrLivArea), se = T) + theme_bw()
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted, ncol = 2)
RestGarageVsLivArea <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = GrLivArea)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = GrLivArea), se = T) + theme_bw()
library(gridExtra)
grid.arrange(arrangeGrob(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted),RestGarageVsLivArea, ncol = 2)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted, ncol = 2)
RestGarageVsLivArea <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = GrLivArea)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = GrLivArea), se = T) + theme_bw()
library(gridExtra)
grid.arrange(arrangeGrob(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted),RestGarageVsLivArea, nrow = 2)
ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = TotalBsmtSF)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = TotalBsmtSF), se = T) + theme_bw()
trainFiltered <- train %>%
dplyr::filter(LivingArea < 4000 & GarageArea < 1000)
trainFiltered <- train %>%
dplyr::filter(LivingArea < 4000 & GarageArea < 1000)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(SalePrice ~ LivingArea)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(SalePrice ~ GrLivArea)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
plot(SLR_LivingArea)
install.packages("broom")
broom
broom::tidy(SLR_LivingArea)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
plot(SLR_LivingArea)
broom::tidy(SLR_LivingArea)
broom::tidy(summary(SLR_LivingArea))
broom::tidy(SLR_LivingArea$coefficients)
broom::augment(SLR_LivingArea)
broom::glance(SLR_LivingArea)
SLR_LivingArea$qr
coef(summary(SLR_LivingArea))
sd(trainFiltered$SalePrice)
1- (51660/sd(trainFiltered$SalePrice)^2*1375)
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
summary(SLR_LivingArea_NoIntercept)
plot(SLR_LivingArea_NoIntercept)
SLR_LivingAreaBsmtArea <- lm(data = trainFiltered, SalePrice ~ GrLivArea + TotalBsmtSF)
plot(SLR_LivingAreaBsmtArea)
SLR_LivingAreaBsmtArea <- lm(data = trainFiltered, SalePrice ~ GrLivArea + GarageArea)
plot(SLR_LivingAreaBsmtArea)
summary(SLR_LivingAreaBsmtArea)
anova(SLR_LivingArea_NoIntercept,SLR_LivingAreaBsmtArea)
car::qq.plot(SLR_LivingArea)
car::qqPlot(SLR_LivingArea)
car::residualPlots(SLR_LivingArea)
car::residualPlots(SLR_LivingArea)
car::cr.plots(SLR_LivingArea)
car::crPlots(SLR_LivingArea)
qqnorm(SLR_LivingArea$residuals)
qqline(SLR_LivingArea$residuals)
title("Normal Q-Q plot of residulas")
qqnorm(SLR_LivingArea$residuals)
qqline(SLR_LivingArea$residuals)
qqnorm(SLR_LivingArea$residuals)
Normal Q-Q plot of residulas"
qqnorm(SLR_LivingArea$residuals)
qqnorm(SLR_LivingArea$residuals)
title("Normal Q-Q plot of residulas")
qqnorm(SLR_LivingArea$residuals, main = "Normal Q-Q plot of residuals")
RedDf <- broom::augment(SLR_LivingArea)
qqnorm(RedDf$.resid)
ggplot(RedDf) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + geom_smooth(method = "lm", formula = SalePrice ~ GrLivArea)
ggplot(RedDf) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice),method = "lm", formula = SalePrice ~ GrLivArea)
ggplot(RedDf) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice),method = "lm", formula = SalePrice ~ GrLivArea)
ggplot(RedDf) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + geom_smooth(data = RedDf,mapping = aes(x = GrLivArea, y = SalePrice),method = "lm", formula = SalePrice ~ GrLivArea)
ggplot(RedDf) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + geom_smooth(data = RedDf,mapping = aes(x = GrLivArea, y = SalePrice),method = "lm", formula = RedDf$SalePrice ~ RedDf$GrLivArea)
ggplot(RedDf) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + geom_smooth(data = RedDf,mapping = aes(x = GrLivArea, y = SalePrice), formula = RedDf$SalePrice ~ RedDf$GrLivArea)
ggplot(RedDf) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + geom_smooth(data = RedDf,mapping = aes(x = GrLivArea, y = SalePrice), method = "lm")
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
par(mfrow=c(2,2))
hist(RedDf$.resid)
qqnorm(RedDf$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(RedDf$.resid)
plot(RedDf$GrLivArea,RedDf$.resid,main = "Residuals vs Living Area")
ggplot(RedDf) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + geom_smooth(data = RedDf,mapping = aes(x = GrLivArea, y = SalePrice), method = "lm")
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
par(mfrow=c(1,2,3,3), 2,2, byrow = T)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
par(mfrow=matrix(c(1,2,3,3)), 2,2, byrow = T)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(mfrow=matrix(c(1,2,3,3)), 2,2, byrow = T)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,2,3,3)), 2,2, byrow = T)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,2,3,3)),2,2, byrow = T)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,2,3,3)),2,2, byrow = T)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,2,3,3)),2,2, byrow = TRUE)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
hist(RedDf$.resid)
qqnorm(RedDf$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(RedDf$.resid)
plot(RedDf$GrLivArea,RedDf$.resid,main = "Residuals vs Living Area")
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(RedDf$.resid)
qqnorm(RedDf$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(RedDf$.resid)
plot(RedDf$GrLivArea,RedDf$.resid,main = "Residuals vs Living Area")
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
options(scipen = 0)
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000)
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(RedDf$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(RedDf$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(RedDf$.resid)
plot(RedDf$GrLivArea,RedDf$.resid,main = "Residuals vs Living Area", xlab = "Above grade living area", ylab = "Residuals")
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
\newline
hist(RedDf$.resid, main = "Histogram of residuals", xlab = "Residuals")
# No intercept model
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
# print model
summary(SLR_LivingArea_NoIntercept)
# Model diagnostics
ResdfNI <- broom::augment(SLR_LivingArea_NoIntercept)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfNI$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfNI$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfNI$.resid)
plot(ResdfNIGrLivArea,RedDf$.resid,main = "Residuals vs Living Area", xlab = "Above grade living area", ylab = "Residuals")
# No intercept model
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
# print model
summary(SLR_LivingArea_NoIntercept)
# Model diagnostics
ResdfNI <- broom::augment(SLR_LivingArea_NoIntercept)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfNI$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfNI$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfNI$.resid)
plot(ResdfNI$GrLivArea,ResdfNI$.resid,main = "Residuals vs Living Area", xlab = "Above grade living area", ylab = "Residuals")
kutosis
?kurtosis
??kurtosis
SLR_BsmtArea <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Total basment area')
# Model diagnostics
# Tidy store of model results
ResdfBsmt <- broom::augment(SLR_BsmtArea)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfBsmt$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfBsmt$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfBsmt$.resid)
plot(ResdfBsmt$TotalBsmtSF,ResdfBsmt$.resid,main = "Residuals vs Total basement Area", xlab = "Above grade living area", ylab = "Residuals")
SLR_BsmtArea <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF)
print(summary(SLR_BsmtArea), caption = 'ANOVA Simple Linear Regression Total basment area')
# Model diagnostics
# Tidy store of model results
ResdfBsmt <- broom::augment(SLR_BsmtArea)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfBsmt$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfBsmt$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfBsmt$.resid)
plot(ResdfBsmt$TotalBsmtSF,ResdfBsmt$.resid,main = "Residuals vs Total basement Area", xlab = "Above grade living area", ylab = "Residuals")
MLR <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF + GrLivArea)
print(summary(MLR), caption = 'ANOVA Multiple Linear Regression Total basment area')
# Model diagnostics
# Tidy store of model results
MLR_Model <- broom::augment(MLR)
# Plot of residuals
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
hist(MLR_Model$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(MLR_Model$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(MLR_Model$.resid)
plot(MLR_Model$TotalBsmtSF,ResdfBsmt$.resid,main = "Residuals vs Total basement Area", xlab = "Total Basement area", ylab = "Residuals")
plot(MLR_Model$GrLivArea,MLR_Model$.resid,main = "Residuals vs Total basement Area", xlab = "Living Area above grade", ylab = "Residuals")
sd(MLR_Model$.resid)
anova(SLR_LivingArea_NoIntercept,SLR_LivingAreaBsmtArea,MLR)
