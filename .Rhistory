vifrandom$Model <- "Arbitary model"
vifrandom$Predictors <- row.names(vifrandom)
colnames(vifrandom) <- c("VIF", "Model", "Predictors")
knitr::kable(vifrandom, caption = "VIF of arbitary model")
# fullmodel
form <- paste0(colnames(correlations)[-21],collapse = "+")
fullmodel <- lm(VV~., data = returns)
summary(fullmodel)
viffm <- as.data.frame(sort(car::vif(fullmodel), decreasing = T))
viffm$Model <- "Full Model"
viffm$Predictors <- row.names(viffm)
colnames(viffm) <- c("VIF", "Model","Predictors")
VIF <- rbind(vifrandom, viffm, row.names = F)
VIFReport <- VIF[1:nrow(VIF)-1,] %>% dplyr::group_by(Model) %>%
dplyr::top_n(n =5,wt = VIF)
knitr::kable(VIFReport[,c("Model","Predictors","VIF")], caption = "VIF Full model")%>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 2)
VIF <- rbind(vifrandom, viffm, row.names = F)
VIFReport <- VIF[1:nrow(VIF)-1,] %>% dplyr::group_by(Model) %>%
dplyr::top_n(n =5,wt = VIF)
knitr::kable(VIFReport[,c("Model","Predictors","VIF")], caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 1)
VIFReport <- VIFReport[,c("Model","Predictors","VIF")]
knitr::kable(VIFReport, "latex", caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = "Model")
knitr::kable(VIFReport, format = "latex",caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = "Model")
VIFReport <- VIFReport[,c("Model","Predictors","VIF")]
knitr::kable(VIFReport, format = "latex",caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = "Model")
knitr::kable(VIFReport, format = "latex",caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 1)
corrplot::corrplot(corr = as.matrix(correlations))
library(car)
# somemodel
RandomModel <- lm(VV ~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns)
summary(RandomModel)
vifrandom <- as.data.frame(sort(car::vif(RandomModel),decreasing = T))
vifrandom$Model <- "Arbitary model"
vifrandom$Predictors <- row.names(vifrandom)
colnames(vifrandom) <- c("VIF", "Model", "Predictors")
# fullmodel
form <- paste0(colnames(correlations)[-21],collapse = "+")
fullmodel <- lm(VV~., data = returns)
summary(fullmodel)
viffm <- as.data.frame(sort(car::vif(fullmodel), decreasing = T))
viffm$Model <- "Full Model"
viffm$Predictors <- row.names(viffm)
colnames(viffm) <- c("VIF", "Model","Predictors")
VIF <- rbind(vifrandom, viffm, row.names = F)
VIFReport <- VIF[1:nrow(VIF)-1,] %>% dplyr::group_by(Model) %>%
dplyr::top_n(n =5,wt = VIF)
VIFReport <- VIFReport[,c("Model","Predictors","VIF")]
knitr::kable(VIFReport, format = "latex",caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 1)
returns.pca <- princomp(returns)
summary(returns.pca)
summary(returns.pca, loadings = T)
plot(returns.pca)
returns.pca$scores
plot(returns.pca$scores[,1], returns.pca$scores[,2])
plot(returns.pca$loadings[,1], returns.pca$loadings[,2])
plot(returns.pca$loadings[,1], returns.pca$loadings[,2],color = "red")
knitr::opts_chunk$set(echo = F,tidy.opts=list(width.cutoff=70),tidy=TRUE)
library(magrittr)
# read data in
stocks <- read.csv(file = 'stock_portfolio.csv', header = T)
# format date & sort chronologically
stocks$Date <- as.Date(stocks$Date,'%d -%b-%y')
stocks <- stocks %>%
dplyr::arrange(Date)
# get log-returns of the data
logreturns <- function(x) {
log(x[-1]/x[-length(x)])
}
returns <- purrr::map_df(.x = stocks[,-1], .f = logreturns)
# compute correlations table
correlations <- as.data.frame(cor(returns))
# get only VV
library(ggplot2)
library(forcats)
VV_cor <- as.data.frame(correlations$VV[-nrow(correlations)])
colnames(VV_cor) <- "VV"
rownames(VV_cor) <- rownames(correlations)[-21]
ggplot(data = VV_cor, mapping = aes(x = fct_reorder(rownames(VV_cor),VV), y = VV)) + geom_col() + coord_flip() + xlab("Stock Index") + ylab("Correlation")
#+ ggtitle ("                                       Correlations with VV")
corrplot::corrplot(corr = as.matrix(correlations))
library(car)
# somemodel
RandomModel <- lm(VV ~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns)
summary(RandomModel)
vifrandom <- as.data.frame(sort(car::vif(RandomModel),decreasing = T))
vifrandom$Model <- "Arbitary model"
vifrandom$Predictors <- row.names(vifrandom)
colnames(vifrandom) <- c("VIF", "Model", "Predictors")
# fullmodel
form <- paste0(colnames(correlations)[-21],collapse = "+")
fullmodel <- lm(VV~., data = returns)
summary(fullmodel)
viffm <- as.data.frame(sort(car::vif(fullmodel), decreasing = T))
viffm$Model <- "Full Model"
viffm$Predictors <- row.names(viffm)
colnames(viffm) <- c("VIF", "Model","Predictors")
VIF <- rbind(vifrandom, viffm, row.names = F)
VIFReport <- VIF[1:nrow(VIF)-1,] %>% dplyr::group_by(Model) %>%
dplyr::top_n(n =5,wt = VIF)
VIFReport <- VIFReport[,c("Model","Predictors","VIF")]
knitr::kable(VIFReport, format = "latex",caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 1)
returns.pca <- princomp(returns)
summary(returns.pca, loadings = T)
library(ggplot2)
returns.pca$center
mean(returns.pca$scores)
colmean(returns.pca$scores)
colmeans(returns.pca$scores)
colMeans(returns.pca$scores)
returns.pca$center
colMeans(returns)
returns.pca$scale
loadings <- returns.pca$loadings
loadings
loadings <- as.data.frame(index = row.names(loadings), loadings = loadings)
loadingsdf <- as.data.frame(index = row.names(loadings))
a
loadingsdf <- as.data.frame(row.names(loadings))
View(loadingsdf)
loadingsdf <- as.data.frame(c(Index = row.names(loadings), Loads = loadings))
View(loadingsdf)
loadingsdf <- as.data.frame(Index = row.names(loadings), Loads = loadings)
loadingsdf <- data.frame(Index = row.names(loadings), Loads = loadings)
data.frame(row.names(loadings), loadings)
returns.pca <- princomp(returns)
loadings <- returns.pca$loadings
idx <- row.names(loadings)
row.names(loadings) <- NULL
loadingsdf <- data.frame(idx,loadings)
as.data.frame(loadings)
pc.1 <- returns.pca$loadings[,1]
pc.2 <- returns.pca$loadings[,2]
names(pc.1)
pc.1
plot(pc.1,pc.2,xlab = "PC1", ylab = "PC2")
text(pc.1,pc.2,labels = names(pc.1),cex = 0.75)
plot(pc.1,pc.2,xlab = "PC1", ylab = "PC2")
text(pc.1,pc.2,labels = names(pc.1),cex = 0.75)
plot(pc.1,pc.2,xlab = "PC1", ylab = "PC2")
text(pc.1,pc.2,labels = names(pc.1),cex = 0.75)
plot(pc.1,pc.2,xlab = "PC1", ylab = "PC2")
text(pc.1,pc.2,labels = names(pc.1),cex = 0.75)
pcs <- data.frame(pc.1,pc.2,names(pc.1))
colnames("PC1","PC2","Index")
colnames(pcs) <- c("PC1","PC2","Index")
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2)) + geom_point() + geom_label()
View(pcs)
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index)) + geom_point() + geom_label()
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index)) + geom_point() + geom_text()
returns.pca <- princomp(returns)
pc.1 <- returns.pca$loadings[,1]
pc.2 <- returns.pca$loadings[,2]
pcs <- data.frame(pc.1,pc.2,names(pc.1))
colnames(pcs) <- c("PC1","PC2","Index")
pcs$Industry <- c("Indus Metal"
, "Banking"
, "Oil Field Services"
, "Oil Refining"
, "Industrial Chemical"
, "Industrial Chemical"
, "Soft Drinks"
, "Banking"
, "Oil Field Services"
, "Oil Refining"
, "Manufacturing"
, "Industrial Chemical"
, "Banking"
, "Soft Drinks"
, "Manufacuring"
, "Oil Refining"
,"Soft Drinks"
, "Oil Field Services"
, "Banking"
, "Oil Refining"
, "Market Index"
)
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text()
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text() + theme_bw()
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text() + theme_bw() + xlim(c(-0.27,-0.12)) + ylim(c(-0.27,0.6))
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text() + theme_bw() #+ xlim(c(-0.27,-0.12)) + ylim(c(-0.27,0.6))
View(pcs)
returns.pca <- princomp(returns[,-21], cor = T)
pc.1 <- returns.pca$loadings[,1]
pc.2 <- returns.pca$loadings[,2]
pcs <- data.frame(pc.1,pc.2,names(pc.1))
colnames(pcs) <- c("PC1","PC2","Index")
pcs$Industry <- c("Indus Metal"
, "Banking"
, "Oil Field Services"
, "Oil Refining"
, "Industrial Chemical"
, "Industrial Chemical"
, "Soft Drinks"
, "Banking"
, "Oil Field Services"
, "Oil Refining"
, "Manufacturing"
, "Industrial Chemical"
, "Banking"
, "Soft Drinks"
, "Manufacuring"
, "Oil Refining"
,"Soft Drinks"
, "Oil Field Services"
, "Banking"
, "Oil Refining"
, "Market Index"
)
returns.pca <- princomp(returns[,-21], cor = T)
pc.1 <- returns.pca$loadings[,1]
pc.2 <- returns.pca$loadings[,2]
pcs <- data.frame(pc.1,pc.2,names(pc.1))
colnames(pcs) <- c("PC1","PC2","Index")
pcs$Industry <- c("Indus Metal"
, "Banking"
, "Oil Field Services"
, "Oil Refining"
, "Industrial Chemical"
, "Industrial Chemical"
, "Soft Drinks"
, "Banking"
, "Oil Field Services"
, "Oil Refining"
, "Manufacturing"
, "Industrial Chemical"
, "Banking"
, "Soft Drinks"
, "Manufacuring"
, "Oil Refining"
,"Soft Drinks"
, "Oil Field Services"
, "Banking"
, "Oil Refining"
)
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text() + theme_bw() #+ xlim(c(-0.27,-0.12)) + ylim(c(-0.27,0.6))
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text() + theme_bw() + xlim(c(-0.27,-0.12)) + ylim(c(-0.27,0.6))
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text(size = 6) + theme_bw() + xlim(c(-0.27,-0.12)) + ylim(c(-0.27,0.6))
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text(size = 2) + theme_bw() + xlim(c(-0.27,-0.12)) + ylim(c(-0.27,0.6))
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text(size = 4) + theme_bw() + xlim(c(-0.27,-0.12)) + ylim(c(-0.27,0.6))
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text(size = 3) + theme_bw() + xlim(c(-0.27,-0.12)) + ylim(c(-0.27,0.6))
library(car)
# somemodel
RandomModel <- lm(VV ~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns)
summary(RandomModel)
vifrandom <- as.data.frame(sort(car::vif(RandomModel),decreasing = T))
vifrandom$Model <- "Arbitary model"
vifrandom$Predictors <- row.names(vifrandom)
colnames(vifrandom) <- c("VIF", "Model", "Predictors")
# fullmodel
form <- paste0(colnames(correlations)[-21],collapse = "+")
fullmodel <- lm(VV~., data = returns)
summary(fullmodel)
viffm <- as.data.frame(sort(car::vif(fullmodel), decreasing = T))
viffm$Model <- "Full Model"
viffm$Predictors <- row.names(viffm)
colnames(viffm) <- c("VIF", "Model","Predictors")
VIF <- rbind(vifrandom, viffm, row.names = F)
VIFReport <- VIF[1:nrow(VIF)-1,] %>% dplyr::group_by(Model) %>%
dplyr::top_n(n =5,wt = VIF)
VIFReport <- VIFReport[,c("Model","Predictors","VIF")]
knitr::kable(VIFReport, format = "latex",caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 1)
library(car)
# somemodel
RandomModel <- lm(VV ~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns)
summary(RandomModel)
vifrandom <- as.data.frame(sort(car::vif(RandomModel),decreasing = T))
vifrandom$Model <- "Arbitary model"
vifrandom$Predictors <- row.names(vifrandom)
colnames(vifrandom) <- c("VIF", "Model", "Predictors")
# fullmodel
form <- paste0(colnames(correlations)[-21],collapse = "+")
fullmodel <- lm(VV~., data = returns)
summary(fullmodel)
viffm <- as.data.frame(sort(car::vif(fullmodel), decreasing = T))
viffm$Model <- "Full Model"
viffm$Predictors <- row.names(viffm)
colnames(viffm) <- c("VIF", "Model","Predictors")
VIF <- rbind(vifrandom, viffm, row.names = F)
VIFReport <- VIF[1:nrow(VIF)-1,] %>% dplyr::group_by(Model) %>%
dplyr::top_n(n =5,wt = VIF)
VIFReport <- VIFReport[,c("Model","Predictors","VIF")]
knitr::kable(VIFReport, format = "latex",caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 1)
library(car)
# somemodel
RandomModel <- lm(VV ~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns)
summary(RandomModel)
vifrandom <- as.data.frame(sort(car::vif(RandomModel),decreasing = T))
vifrandom$Model <- "Arbitary model"
vifrandom$Predictors <- row.names(vifrandom)
colnames(vifrandom) <- c("VIF", "Model", "Predictors")
# fullmodel
form <- paste0(colnames(correlations)[-21],collapse = "+")
fullmodel <- lm(VV~., data = returns)
summary(fullmodel)
viffm <- as.data.frame(sort(car::vif(fullmodel), decreasing = T))
viffm$Model <- "Full Model"
viffm$Predictors <- row.names(viffm)
colnames(viffm) <- c("VIF", "Model","Predictors")
VIF <- rbind(vifrandom, viffm, row.names = F)
VIFReport <- VIF[1:nrow(VIF)-1,] %>% dplyr::group_by(Model) %>%
dplyr::top_n(n =5,wt = VIF)
VIFReport <- VIFReport[,c("Model","Predictors","VIF")]
knitr::kable(VIFReport, format = "latex",caption = "VIF Full model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 1)
returns.pca$call
returns.pca$loadings
View(viffm)
View(VV_cor)
View(correlations)
plot(returns.pca)
plot(returns.pca, type = "line")
plot(returns.pca, type = "line", main = "")
plot(returns.pca, type = "line", xlab = "Component Number", main = "")
plot(returns.pca, type = "line", xlabel = "Component Number", main = "")
plot(returns.pca, type = "line", xlab = "Component Number", main = "")
plot(returns.pca)
plot(returns.pca)
plot(returns.pca)
plot(returns.pca, xlab = "Component Number", main = " ")
varcontribution <- returns.pca$sdev^2 / sum(returns.pca^2)
varcontribution <- returns.pca$sdev^2 / sum(returns.pca$sdev^2)
plot(varcontribution)
varcontribution <- returns.pca$sdev^2 / sum(returns.pca$sdev^2)
plot(varcontribution, xlab = "Component Number", ylab = "Variance Contribution")
varcontribution <- returns.pca$sdev^2 / sum(returns.pca$sdev^2)
plot(varcontribution, xlab = "Component Number", ylab = "Variance Contribution", type = "l")
cumvariance <- cumsum(returns.pca$sdev^2) / sum(returns.pca$sdev^2)
plot(cumvariance)
varcontribution <- returns.pca$sdev^2 / sum(returns.pca$sdev^2)
plot(varcontribution, xlab = "Component Number", ylab = "Variance Contribution", type = "l")
varcontribution <- returns.pca$sdev^2 / sum(returns.pca$sdev^2)
plot(varcontribution, xlab = "Component Number", ylab = "Variance Contribution", type = "p")
varcontribution <- returns.pca$sdev^2 / sum(returns.pca$sdev^2)
plot(varcontribution, xlab = "Component Number", ylab = "Variance Contribution", type = "l")
varcontribution <- returns.pca$sdev^2 / sum(returns.pca$sdev^2)
plot(varcontribution, xlab = "Component Number", ylab = "Variance Contribution", type = "l") %>%
points(varcontribution)
varcontribution <- returns.pca$sdev^2 / sum(returns.pca$sdev^2)
plot(varcontribution, xlab = "Component Number", ylab = "Variance Contribution", type = "l")
points(varcontribution)
cumvariance <- cumsum(returns.pca$sdev^2) / sum(returns.pca$sdev^2)
plot(cumvariance, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
points(cumvariance)
cumvariance <- cumsum(returns.pca$sdev^2) / sum(returns.pca$sdev^2)
plot(cumvariance, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
points(cumvariance)
abline(h=0.8,lwd = 1.5,col = "red")
abline(v = 8,lwd = 1.5, col = "red")
cumvariance <- cumsum(returns.pca$sdev^2) / sum(returns.pca$sdev^2)
plot(cumvariance, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
points(cumvariance)
abline(h=0.8,lwd = 1.5,col = "red")
abline(v = 8,lwd = 1.5, col = "red")
text(13,0.5, 'Keep 8 Principal Components')
cumvariance <- cumsum(returns.pca$sdev^2) / sum(returns.pca$sdev^2)
plot(cumvariance, xlab = "Component Number", ylab = "Cumulative Variance", type = "l")
points(cumvariance)
abline(h=0.8,lwd = 1.5,col = "red")
abline(v = 8,lwd = 1.5, col = "red")
text(13,0.7, 'Keep 8 Principal Components')
plot(returns.pca, xlab = "Component Number", main = " ")
screeplot(returns.pca)
plot(returns.pca, xlab = "Component Number", main = " ")
# screeplot(returns.pca)
test <- returns.pca$loadings %*% returns[,-21]
test <- returns.pca$loadings[1] %*% returns[,-21]
View(loadingsdf)
View(loadingsdf)
test <- pcs$PC1 %*% returns[,-21]
xs <- as.matrix(returns[,-21])
pc1 <- as.matrix(pcs$PC1)
dim(pc1)
dim(xs)
test <- xs %*% pc1
test
head(test)
head(returns.pca$scores)
View(returns.scores)
returns.scores <- as.data.frame(returns.pca$scores)
View(returns.scores)
sd(returns.scores$Comp.1)
returns.scores <- as.data.frame(returns.pca$scores)
returns.scores$VV <- returns$VV
returns.scores$u <- runif(n = nrow(returns.scores), min = 0, max = 1)
train.scores <- subset(returns.scores,u < 0.7)
test.scores <- subset(returns.scores, u >= 0.7)
df <- cbind(Data = c("Training set", "Validation set","Total"), Samples = c(nrow(train.scores),nrow(test.scores),nrow(train.scores) + nrow(test.scores)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
pca.lm <- lm(VV ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6 + Comp.7 + Comp.8, data = returns.scores)
summary(pca.lm)
vif(pca.lm)
pca.lm <- lm(VV ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6 + Comp.7 + Comp.8, data = returns.scores)
summary(pca.lm)
knitr::kable(as.data.frame(vif(pca.lm)), caption = "VIF of Principle components")
knitr::kable(as.data.frame(vif(pca.lm),colnames = c("Principle Component", "VIF")), caption = "VIF of Principle components")
pca.lm <- lm(VV ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6 + Comp.7 + Comp.8, data = returns.scores)
summary(pca.lm)
vifpc <- as.data.frame(vif(pca.lm))
colnames(vifpc) <- c("Principle Component", "VIF")
pca.lm <- lm(VV ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6 + Comp.7 + Comp.8, data = returns.scores)
summary(pca.lm)
vifpc <- as.data.frame(vif(pca.lm))
colnames(vifpc) <- c("Principle Component", "VIF")
colnames(vifpc) <- c("Principle Component", "VIF")
`colnames<-`(vifpc,c("PC","VIF"))
View(vifpc)
pca.lm <- lm(VV ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6 + Comp.7 + Comp.8, data = returns.scores)
summary(pca.lm)
vifpc <- as.data.frame(VIF = vif(pca.lm))
vifpc <- as.data.frame(VIF = vif(pca.lm))
vifpc <- as.data.frame(vif(pca.lm))
pca.lm <- lm(VV ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6 + Comp.7 + Comp.8, data = returns.scores)
summary(pca.lm)
vifpc <- as.data.frame(vif(pca.lm))
vifpc$PC <- row.names(vifpc)
knitr::kable(vifpc[,c("PC","VIF")], caption = "VIF of Principle components")
pca.lm <- lm(VV ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6 + Comp.7 + Comp.8, data = returns.scores)
summary(pca.lm)
vifpc <- as.data.frame(vif(pca.lm))
vifpc$PC <- row.names(vifpc)
colnames(vifpc) <- c("VIF", "PC")
knitr::kable(vifpc[,c("PC","VIF")], caption = "VIF of Principle components")
pca.lm <- lm(VV ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6 + Comp.7 + Comp.8, data = returns.scores)
summary(pca.lm)
vifpc <- as.data.frame(vif(pca.lm))
vifpc$PC <- row.names(vifpc)
colnames(vifpc) <- c("VIF", "PC")
row.names(vifpc) <- NULL
knitr::kable(vifpc[,c("PC","VIF")], caption = "VIF of Principle components")
mean(abs(pca.lm$residuals))
pca.test <- predict(pca.lm.newdata = test.scores)
pca.test <- predict(pca.lm,newdata = test.scores)
pca.test <- predict(pca.lm,newdata = test.scores)
pca.test.MAE <- mean(abs(test.scores$VV - pca.test))
mean(abs(test.scores$VV - pca.test))
mean(abs(pca.lm$residuals))
mean(abs(test.scores$VV - pca.test))
pca.lm.MAE <- mean(abs(pca.lm$residuals))
pca.test <- predict(pca.lm,newdata = test.scores)
pca.test.MAE <- mean(abs(test.scores$VV - pca.test))
returns$u <- runif(nrow(returns), min = 0 , max = 1)
returns.train <- subset(returns,u >= 0.7)
returns.test <- subset(returns, u < 0.7)
df <- cbind(Data = c("Training set", "Validation set","Total"), Samples = c(nrow(returns.train),nrow(returns.test),nrow(returns.train) + nrow(returns.test)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
pca.lm.MAE <- mean(abs(pca.lm$residuals))
pca.test <- predict(pca.lm,newdata = test.scores)
pca.test.MAE <- mean(abs(test.scores$VV - pca.test))
returns$u <- runif(nrow(returns), min = 0 , max = 1)
returns.train <- subset(returns,u >= 0.7)
returns.test <- subset(returns, u < 0.7)
df <- cbind(Data = c("Training set", "Validation set","Total"), Samples = c(nrow(returns.train),nrow(returns.test),nrow(returns.train) + nrow(returns.test)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling of Raw returns")
model.1 <- lm(VV~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns.train)
summary(model.1)
model.1.train.MAE <- mean(abs(model.1$residuals))
pca.lm.MAE <- mean(abs(pca.lm$residuals))
pca.test <- predict(pca.lm,newdata = test.scores)
pca.test.MAE <- mean(abs(test.scores$VV - pca.test))
returns$u <- runif(nrow(returns), min = 0 , max = 1)
returns.train <- subset(returns,u >= 0.7)
returns.test <- subset(returns, u < 0.7)
df <- cbind(Data = c("Training set", "Validation set","Total"), Samples = c(nrow(returns.train),nrow(returns.test),nrow(returns.train) + nrow(returns.test)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling of Raw returns")
model.1 <- lm(VV~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns.train)
summary(model.1)
model1.train.MAE <- mean(abs(model.1$residuals))
model1.test <- predict(model.1, newdata = returns.test)
coef_pca <- round(coef(pca.lm),3)
signs_pca <- ifelse(sign(coef_pca)==1,"+","-")
formula_pca <- as.character(formula(pca.lm))[3]
predictors_pca <- unlist(strsplit(formula_pca, split = "+",fixed = T))
Betas_pca <- paste(abs(coef_pca2:length(coef_pca)]),"*", predictors_pca)
Betas_pca <- paste(abs(coef_pca2:length(coef_pca)),"*", predictors_pca)
Betas_pca <- paste(abs(coef_pca[2:length(coef_pca)]),"*", predictors_pca)
pcaeqn <- paste("VV = ",paste(coef_pca[1],paste(paste(signs_pca[2:length(signs_pca)], Betas_pca),collapse = " ")))
pcaeqn
coef_pca <- round(coef(pca.lm),5)
signs_pca <- ifelse(sign(coef_pca)==1,"+","-")
formula_pca <- as.character(formula(pca.lm))[3]
predictors_pca <- unlist(strsplit(formula_pca, split = "+",fixed = T))
Betas_pca <- paste(abs(coef_pca[2:length(coef_pca)]),"*", predictors_pca)
pcaeqn <- paste("VV = ",paste(coef_pca[1],paste(paste(signs_pca[2:length(signs_pca)], Betas_pca),collapse = " ")))
pcaeqn
coef_model.1 <- round(coef(model.1),5)
signs_model.1 <- ifelse(sign(coef_model.1)==1,"+","-")
formula_model.1 <- as.character(formula(model.1))[3]
predictors_model.1 <- unlist(strsplit(formula_model.1, split = "+",fixed = T))
Betas_model.1 <- paste(abs(coef_model.1[2:length(coef_model.1)]),"*", predictors_model.1)
model.1eqn <- paste("VV = ",paste(coef_model.1[1],paste(paste(signs_model.1[2:length(signs_model.1)], Betas_model.1),collapse = " ")))
model.1eqn
