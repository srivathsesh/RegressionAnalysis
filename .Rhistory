# insert dummy variable to code SaleCondition being either equal to 'Normal' or 'Partial'
ames$Sale_NrmPar <- ifelse(ames$SaleCondition == 'Normal' | ames$SaleCondition == 'Partial', 1,0)
ames$DropCondition <- ifelse(ames$Zoning!='RL','01: Not LowDensityZone',
ifelse(ames$Sale_NrmPar == 0,'02: Not Normal/Partial Sale',
ifelse(ames$Street!='Pave','03: Street Not Paved',
ifelse(ames$GrLivArea <LivingAreaCutoff,'04: Less than 800 SqFt',
ifelse(ames$TotalBsmtSF <1,'05: No Basement',
'99: Eligible Sample')
))))
# Waterfall
waterfall <- ames %>%
dplyr::group_by(DropCondition) %>%
dplyr::summarise(counts=n())
# Print waterfall table
knitr::kable(waterfall, align = c("l", "r"),caption = "Drop waterfall")
# Define training portion of the data
trainPercent <- round(0.7,1)
# Columns of interest
colsofinterest <- c('SID'
,'LotArea'
, 'LotConfig'
, 'Neighborhood'
, 'BldgType'
, 'HouseStyle'
, 'OverallCond'
, 'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'BsmtFullBath'
, 'BsmtHalfBath'
, 'FullBath'
, 'HalfBath'
, 'BedroomAbvGr'
, 'KitchenQual'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'MoSold'
, 'YrSold'
, 'SaleCondition'
, 'SalePrice'
, 'FirstFlrSF'
, 'SecondFlrSF')
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing.
colsmatrix <- matrix(colsofinterest[2:length(colsofinterest)],ncol = 3)
# printing on pdf
knitr::kable(colsmatrix, caption = "Variables of interest")
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath) %>%
dplyr::mutate(TotalSQFT = TotalBsmtSF + FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(SQFTNoBsmt = FirstFlrSF + SecondFlrSF)
# training set
train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
train <- train %>% dplyr::arrange(SID)
# Validation set
Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set"), Samples = c(nrow(train),nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
# Multicolinearity exploration
test <- SampleFrame[,c('SalePrice','TotalBsmtSF','GarageArea', 'GrLivArea', 'LotArea', 'TotalBath')]
pairs(test)
# Plot of basement area vs sale price
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
# annotation addition
BasementArea <- BasementArea + annotate("text", x = 2000, y = 700000, label = paste0("correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
# Restrict basment to < 2500
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
# Basement < 2500 vs SalePrice
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
# Annotations
RestrictedBasement <- RestrictedBasement +  annotate("text", x = 1500, y = 700000, label = paste0("correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
# Print plot
grid.arrange(BasementArea, RestrictedBasement, ncol = 2)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted, ncol = 2)
RestGarageVsLivArea <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = GrLivArea)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = GrLivArea), se = T) + theme_bw()
RestGarageVsLivArea <- RestGarageVsLivArea + annotate("text",x = 250, y = 3000,label = paste0("Correlation = ",round(cor(RestrictedLivingGarageArea$GarageArea,RestrictedLivingGarageArea$GrLivArea),2)))
RestGarageVsBsmt <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = TotalBsmtSF)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = TotalBsmtSF), se = T) + theme_bw()
RestGarageVsBsmt <- RestGarageVsBsmt + annotate("text",x = 250, y = 3000,label = paste0("Correlation = ",round(cor(RestrictedLivingGarageArea$GarageArea,RestrictedLivingGarageArea$TotalBsmtSF),2)))
grid.arrange(RestGarageVsLivArea,RestGarageVsBsmt, nrow=2)
options(scipen = 0)
# Filtering Living Area < 4000 and Garage area < 1000 and creating additional variable of LogSalePrice in preparation of the next section.
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000) %>%
dplyr::mutate(LogSalePrice = log10(SalePrice))
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,2,3,3),2,2, byrow = TRUE))
hist(RedDf$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(RedDf$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(RedDf$.resid)
plot(RedDf$GrLivArea,RedDf$.resid,main = "Residuals vs Living Area", xlab = "Above grade living area", ylab = "Residuals")
# No intercept model
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
# print model
summary(SLR_LivingArea_NoIntercept)
# Model diagnostics
ResdfNI <- broom::augment(SLR_LivingArea_NoIntercept)
FtestsSLR_GrLivArea <- broom::glance(SLR_LivingArea_NoIntercept)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfNI$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfNI$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfNI$.resid)
plot(ResdfNI$GrLivArea,ResdfNI$.resid,main = "Residuals vs Living Area", xlab = "Above grade living area", ylab = "Residuals")
SLR_BsmtArea <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF)
print(summary(SLR_BsmtArea), caption = 'ANOVA Simple Linear Regression Total basment area')
# Model diagnostics
# Tidy store of model results
ResdfBsmt <- broom::augment(SLR_BsmtArea)
FTestsSLR_BsmtArea <- broom::glance(SLR_BsmtArea)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfBsmt$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfBsmt$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfBsmt$.resid)
plot(ResdfBsmt$TotalBsmtSF,ResdfBsmt$.resid,main = "Residuals vs Total basement Area", xlab = "Total Basement area", ylab = "Residuals")
MLR <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF + GrLivArea)
print(summary(MLR), caption = 'ANOVA Multiple Linear Regression Total basment area')
# Model diagnostics
# Tidy store of model results
MLR_Model <- broom::augment(MLR)
FtestsMLR <- broom::glance(MLR)
# Plot of residuals
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
hist(MLR_Model$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(MLR_Model$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(MLR_Model$.resid)
plot(MLR_Model$TotalBsmtSF,MLR_Model$.resid,main = "Residuals vs Total basement Area", xlab = "Total Basement area", ylab = "Residuals")
plot(MLR_Model$GrLivArea,MLR_Model$.resid,main = "Residuals vs Living Area", xlab = "Living Area above grade", ylab = "Residuals")
## Create table for comparing models
Models <- c("SalePrice = 126.9 * GrLivArea","SalePrice = 47859.31 + 129.96 * TotalBsmtSF","-502244.02 + 84.11 * TotalBsmtSF + 97.608 * GrLivArea")
MSres <- c(round(FtestsSLR_GrLivArea$sigma,2),round(FTestsSLR_BsmtArea$sigma,2),round(FtestsMLR$sigma,2))
F_Stat <- c(round(FtestsSLR_GrLivArea$statistic,2),round(FTestsSLR_BsmtArea$statistic,2), round(FtestsMLR$statistic,2))
P_Value <- c(round(FtestsSLR_GrLivArea$p.value,2),round(FTestsSLR_BsmtArea$p.value,2), round(FtestsMLR$p.value,2))
Adj_R_Squared <- c(round(FtestsSLR_GrLivArea$adj.r.squared,2),round(FTestsSLR_BsmtArea$adj.r.squared,2), round(FtestsMLR$adj.r.squared,2))
Normality <- c("Satisfied thick pen test; heavy tails","Satisfied thick pen test; heavy tails","Satisfied thick pen test; heavy tails")
ResidualPattern <- c("Funnel shaped", "Funnel shaped", "Funnel shaped")
# Comparisondf <- cbind(Models,MSres,F_Stat,P_Value,Adj_R_Squared,Normality,ResidualPattern)
# colnames(Comparisondf) <- c("Model","MSres","F Stat","P Value", "Adj R^2", "Residuals Normality", "Residuals Pattern")
Comparisondf <- cbind(Models,MSres,F_Stat,P_Value,Adj_R_Squared)
colnames(Comparisondf) <- c("Model","MSres","F Stat","P Value", "Adj R^2")
# print table
knitr::kable(Comparisondf,caption = "Model comparison")
# pander::pander(Comparisondf)
library(tidyverse)
library(forcats)
# prepare dataframe with residuals
MLR_Model$Neighborhood <- trainFiltered$Neighborhood
MLR_Model$TotRmsAbvGrd <- trainFiltered$TotRmsAbvGrd
MLR_Model$KitchenQual <- trainFiltered$KitchenQual
MLR_Model$FirstFlrSF <- trainFiltered$FirstFlrSF
MLR_Model$SecondFlrSF <- trainFiltered$SecondFlrSF
MLR_Model$TotalSQFT <- trainFiltered$TotalSQFT
MLR_Model$SQFTNoBsmt <- trainFiltered$SQFTNoBsmt
# Boxplot of residuals by neighborhood - DO NOT KNOW HOW TO CREATE LEGENF FOR DASHED LINES
p <- ggplot(MLR_Model, mapping = aes(x = fct_reorder(Neighborhood,.std.resid), y= .std.resid, color = Neighborhood,guides(color = F)))
residboxplot <- p + geom_boxplot() + coord_flip() + theme_bw() + scale_colour_discrete(guide = FALSE)
residboxplot + geom_hline(yintercept = c(-1,0,1) , linetype = 'solid',color = 'grey') + geom_vline(xintercept = c(9.5,11.5), linetype = 'dashed',color =c('red','blue') ) + ylab("Standardized residuals") + xlab("Neighborhood")
# MAE by neighborhood
MAE_Neighborhood <- MLR_Model %>%
group_by(Neighborhood) %>%
summarise(MAE = mean(abs(.resid)),TotalSalePrice = sum(SalePrice), TotalLivArea = sum(GrLivArea), Tot.sqft = sum(TotalSQFT)) %>%
mutate(MeanPricePerSqft = TotalSalePrice/TotalLivArea) %>%
mutate(MeanPricePerSqft2 = TotalSalePrice/Tot.sqft)
p1 <- ggplot(data = MAE_Neighborhood, mapping = aes(x = MeanPricePerSqft2, y = MAE)) + geom_point() +  theme_bw() + xlab("Mean $/Sq.ft") + geom_smooth()
p2 <- ggplot(data = MAE_Neighborhood, mapping = aes(x = fct_reorder(Neighborhood,MeanPricePerSqft2), y = MeanPricePerSqft2)) + geom_point() + coord_flip() + theme_bw() + geom_hline(yintercept = c(60,70,80,90),linetype = "dashed", color = "red") + xlab("Neighborhood") + ylab("Mean $/Sq.ft")
grid.arrange(p1,p2,ncol=2)
# Grouping Neighborhoods
Less60Neigh <- MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 <= 60)]
Bet60_70 <-  MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 <= 70 & MAE_Neighborhood$MeanPricePerSqft2 > 60 )]
Bet70_80 <-  MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 <= 80 & MAE_Neighborhood$MeanPricePerSqft2 > 70 )]
Bet80_90 <-   MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 <= 90 & MAE_Neighborhood$MeanPricePerSqft2 > 80)]
Greater_90 <-   MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 > 90)]
trainFiltered$Tier1 <- ifelse(trainFiltered$Neighborhood %in% Less60Neigh,1,0)
trainFiltered$Tier2 <- ifelse(trainFiltered$Neighborhood %in% Bet60_70,1,0)
trainFiltered$Tier3 <- ifelse(trainFiltered$Neighborhood %in% Bet70_80, 1,0)
trainFiltered$Tier4 <- ifelse(trainFiltered$Neighborhood %in% Bet80_90, 1,0)
trainFiltered$Tier5 <- ifelse(trainFiltered$Neighborhood %in% Greater_90, 1,0)
tierdf <- data.frame(Tier = c(1,2,3,4,5), `Price per sq.ft` = c("<= 60", "> 60 and <= 70", "> 70 and <= 80", "> 80 and <= 90", " > 90"))
trainFiltered$KitchenQual <- as.factor(trainFiltered$KitchenQual)
levels(trainFiltered$KitchenQual)
as.integer(trainFiltered$KitchenQual)
trainFiltered$RecodeKQ <- as.integer(trainFiltered$KitchenQual)
table(trainFiltered$KitchenQual,trainFiltered$RecodeKQ)
table(trainFiltered$Neighborhood,trainFiltered$KitchenQual)
trainFiltered$NeighRecode <- as.integer(as.factor(trainFiltered$Neighborhood))
table(trainFiltered$NeighRecode,trainFiltered$KitchenQual)
ComplexModel <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF + GrLivArea + LotArea + TotRmsAbvGrd + Tier1 + Tier2 + Tier3 + Tier4)
summary(ComplexModel)
ComplexModel_Data <- broom::augment(ComplexModel)
qqnorm(ComplexModel_Data$.resid)
ComplexModel_Data <- broom::augment(ComplexModel)
summary(ComplexModel)
ComplexModel <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF + GrLivArea + LotArea + TotalBath + Tier1 + Tier2 + Tier3 + Tier4)
summary(ComplexModel)
ComplexModel_Data <- broom::augment(ComplexModel)
qqnorm(ComplexModel_Data$.resid)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$LotArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBsmtSF)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$GrLivArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBath)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$LotArea)
ComplexModel_Data1 <- broom::augment(ComplexModel)
ComplexModel_Data <- ComplexModel_Data1 %>% filter(LotArea < 100000)
qqnorm(ComplexModel_Data$.resid)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$LotArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBsmtSF)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$GrLivArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBath)
ComplexModel_log <- lm(data = trainFiltered,LogSalePrice ~ TotalBsmtSF + GrLivArea + LotArea + TotalBath + Tier1 + Tier2 + Tier3 + Tier4)
summary(ComplexModel_log)
CpmplexModel_log_data <- broom::augment(ComplexModel_log)
plot(y = ComplexModel_log_data$.resid, x = ComplexModel_log_data$LotArea)
ComplexModel_log_data <- broom::augment(ComplexModel_log)
plot(y = ComplexModel_log_data$.resid, x = ComplexModel_log_data$LotArea)
plot(y = ComplexModel_log_data.resid, x = ComplexModel_log_data$TotalBsmtSF)
plot(y = ComplexModel_log_data$.resid, x = ComplexModel_log_data$TotalBsmtSF)
plot(y = ComplexModel_log_data$.resid, x = ComplexModel_log_data$GrLivArea)
plot(y = ComplexModel_log_data$.resid, x = ComplexModel_log_data$TotalBath)
trainFiltered$logLotArea <- log10(trainFiltered$LotArea)
ComplexModel_log_lot <- lm(data = trainFiltered,LogSalePrice ~ TotalBsmtSF + GrLivArea + LogLotArea + TotalBath + Tier1 + Tier2 + Tier3 + Tier4)
trainFiltered$logLotArea <- log10(trainFiltered$LotArea)
ComplexModel_log_lot <- lm(data = trainFiltered,LogSalePrice ~ TotalBsmtSF + GrLivArea + LogLotArea + TotalBath + Tier1 + Tier2 + Tier3 + Tier4)
ComplexModel_log_lot <- lm(data = trainFiltered,LogSalePrice ~ TotalBsmtSF + GrLivArea + logLotArea + TotalBath + Tier1 + Tier2 + Tier3 + Tier4)
summary(ComplexModel_log_lot)
ComplexModel_log_lot_data <- broom::augment(ComplexModel_log_lot)
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=60),tidy=TRUE)
ames <- readr::read_delim(file = 'ames_housing_data.csv', delim = ",")
# chamge from scientic notations, to restore to default options(scipen = 0)
options(scipen = 999)
library(magrittr)
LivingAreaCutoff <- 800
# Adding drop conditions varaible
# insert dummy variable to code SaleCondition being either equal to 'Normal' or 'Partial'
ames$Sale_NrmPar <- ifelse(ames$SaleCondition == 'Normal' | ames$SaleCondition == 'Partial', 1,0)
ames$DropCondition <- ifelse(ames$Zoning!='RL','01: Not LowDensityZone',
ifelse(ames$Sale_NrmPar == 0,'02: Not Normal/Partial Sale',
ifelse(ames$Street!='Pave','03: Street Not Paved',
ifelse(ames$GrLivArea <LivingAreaCutoff,'04: Less than 800 SqFt',
ifelse(ames$TotalBsmtSF <1,'05: No Basement',
'99: Eligible Sample')
))))
# Waterfall
waterfall <- ames %>%
dplyr::group_by(DropCondition) %>%
dplyr::summarise(counts=n())
# Print waterfall table
knitr::kable(waterfall, align = c("l", "r"),caption = "Drop waterfall")
# Define training portion of the data
trainPercent <- round(0.7,1)
# Columns of interest
colsofinterest <- c('SID'
,'LotArea'
, 'LotConfig'
, 'Neighborhood'
, 'BldgType'
, 'HouseStyle'
, 'OverallCond'
, 'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'BsmtFullBath'
, 'BsmtHalfBath'
, 'FullBath'
, 'HalfBath'
, 'BedroomAbvGr'
, 'KitchenQual'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'MoSold'
, 'YrSold'
, 'SaleCondition'
, 'SalePrice'
, 'FirstFlrSF'
, 'SecondFlrSF')
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing.
colsmatrix <- matrix(colsofinterest[2:length(colsofinterest)],ncol = 3)
# printing on pdf
knitr::kable(colsmatrix, caption = "Variables of interest")
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath) %>%
dplyr::mutate(TotalSQFT = TotalBsmtSF + FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(SQFTNoBsmt = FirstFlrSF + SecondFlrSF)
# training set
train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
train <- train %>% dplyr::arrange(SID)
# Validation set
Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set"), Samples = c(nrow(train),nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
# Multicolinearity exploration
test <- SampleFrame[,c('SalePrice','TotalBsmtSF','GarageArea', 'GrLivArea', 'LotArea', 'TotalBath')]
pairs(test)
# Plot of basement area vs sale price
library(ggplot2)
library(gridExtra)
BasementArea <- ggplot(data = SampleFrame,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
# annotation addition
BasementArea <- BasementArea + annotate("text", x = 2000, y = 700000, label = paste0("correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
# Restrict basment to < 2500
RestrictedBsmtSF <- SampleFrame %>%
dplyr::filter(TotalBsmtSF > 0 & TotalBsmtSF < 2500)
# Basement < 2500 vs SalePrice
RestrictedBasement <- ggplot(data = RestrictedBsmtSF,mapping = aes(x = TotalBsmtSF, y = SalePrice)) + geom_point() + geom_smooth(method = "lm", se = T) + xlab('Toal basement area') + theme_bw()
# Annotations
RestrictedBasement <- RestrictedBasement +  annotate("text", x = 1500, y = 700000, label = paste0("correlation = ",round(cor(SampleFrame$TotalBsmtSF,SampleFrame$SalePrice),2)))
# Print plot
grid.arrange(BasementArea, RestrictedBasement, ncol = 2)
LivingArea <- ggplot(SampleFrame) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeArea<- ggplot(SampleFrame) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
RestrictedLivingGarageArea <- SampleFrame %>%
dplyr::filter(GrLivArea < 4000 & GarageArea > 0 & GarageArea < 1000)
LivingAreaRestricted <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GrLivArea, y = SalePrice)) + xlab('Living Area') + geom_smooth(mapping = aes(x = GrLivArea, y = SalePrice), se = T) + theme_bw()
GargeAreaRestricted<- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = SalePrice)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = SalePrice), se = T) + theme_bw()
grid.arrange(LivingArea, GargeArea,LivingAreaRestricted,GargeAreaRestricted, ncol = 2)
RestGarageVsLivArea <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = GrLivArea)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = GrLivArea), se = T) + theme_bw()
RestGarageVsLivArea <- RestGarageVsLivArea + annotate("text",x = 250, y = 3000,label = paste0("Correlation = ",round(cor(RestrictedLivingGarageArea$GarageArea,RestrictedLivingGarageArea$GrLivArea),2)))
RestGarageVsBsmt <- ggplot(RestrictedLivingGarageArea) + geom_point(mapping = aes(x = GarageArea, y = TotalBsmtSF)) + xlab('Garage Area') + geom_smooth(mapping = aes(x = GarageArea, y = TotalBsmtSF), se = T) + theme_bw()
RestGarageVsBsmt <- RestGarageVsBsmt + annotate("text",x = 250, y = 3000,label = paste0("Correlation = ",round(cor(RestrictedLivingGarageArea$GarageArea,RestrictedLivingGarageArea$TotalBsmtSF),2)))
grid.arrange(RestGarageVsLivArea,RestGarageVsBsmt, nrow=2)
options(scipen = 0)
# Filtering Living Area < 4000 and Garage area < 1000 and creating additional variable of LogSalePrice in preparation of the next section.
trainFiltered <- train %>%
dplyr::filter(GrLivArea < 4000 & GarageArea < 1000) %>%
dplyr::mutate(LogSalePrice = log10(SalePrice))
SLR_LivingArea <- lm(data = trainFiltered,SalePrice ~ GrLivArea)
print(summary(SLR_LivingArea), caption = 'ANOVA Simple Linear Regression Above grade living area')
# Model diagnostics
# Tidy store of model results
RedDf <- broom::augment(SLR_LivingArea)
# Plot of residuals
layout(matrix(c(1,2,3,3),2,2, byrow = TRUE))
hist(RedDf$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(RedDf$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(RedDf$.resid)
plot(RedDf$GrLivArea,RedDf$.resid,main = "Residuals vs Living Area", xlab = "Above grade living area", ylab = "Residuals")
# No intercept model
SLR_LivingArea_NoIntercept <- lm(data = trainFiltered, SalePrice ~ GrLivArea +0)
# print model
summary(SLR_LivingArea_NoIntercept)
# Model diagnostics
ResdfNI <- broom::augment(SLR_LivingArea_NoIntercept)
FtestsSLR_GrLivArea <- broom::glance(SLR_LivingArea_NoIntercept)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfNI$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfNI$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfNI$.resid)
plot(ResdfNI$GrLivArea,ResdfNI$.resid,main = "Residuals vs Living Area", xlab = "Above grade living area", ylab = "Residuals")
SLR_BsmtArea <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF)
print(summary(SLR_BsmtArea), caption = 'ANOVA Simple Linear Regression Total basment area')
# Model diagnostics
# Tidy store of model results
ResdfBsmt <- broom::augment(SLR_BsmtArea)
FTestsSLR_BsmtArea <- broom::glance(SLR_BsmtArea)
# Plot of residuals
layout(matrix(c(1,2,3,3), 2, 2, byrow = TRUE))
hist(ResdfBsmt$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(ResdfBsmt$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(ResdfBsmt$.resid)
plot(ResdfBsmt$TotalBsmtSF,ResdfBsmt$.resid,main = "Residuals vs Total basement Area", xlab = "Total Basement area", ylab = "Residuals")
MLR <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF + GrLivArea)
print(summary(MLR), caption = 'ANOVA Multiple Linear Regression Total basment area')
# Model diagnostics
# Tidy store of model results
MLR_Model <- broom::augment(MLR)
FtestsMLR <- broom::glance(MLR)
# Plot of residuals
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
hist(MLR_Model$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(MLR_Model$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(MLR_Model$.resid)
plot(MLR_Model$TotalBsmtSF,MLR_Model$.resid,main = "Residuals vs Total basement Area", xlab = "Total Basement area", ylab = "Residuals")
plot(MLR_Model$GrLivArea,MLR_Model$.resid,main = "Residuals vs Living Area", xlab = "Living Area above grade", ylab = "Residuals")
## Create table for comparing models
Models <- c("SalePrice = 126.9 * GrLivArea","SalePrice = 47859.31 + 129.96 * TotalBsmtSF","-502244.02 + 84.11 * TotalBsmtSF + 97.608 * GrLivArea")
MSres <- c(round(FtestsSLR_GrLivArea$sigma,2),round(FTestsSLR_BsmtArea$sigma,2),round(FtestsMLR$sigma,2))
F_Stat <- c(round(FtestsSLR_GrLivArea$statistic,2),round(FTestsSLR_BsmtArea$statistic,2), round(FtestsMLR$statistic,2))
P_Value <- c(round(FtestsSLR_GrLivArea$p.value,2),round(FTestsSLR_BsmtArea$p.value,2), round(FtestsMLR$p.value,2))
Adj_R_Squared <- c(round(FtestsSLR_GrLivArea$adj.r.squared,2),round(FTestsSLR_BsmtArea$adj.r.squared,2), round(FtestsMLR$adj.r.squared,2))
Normality <- c("Satisfied thick pen test; heavy tails","Satisfied thick pen test; heavy tails","Satisfied thick pen test; heavy tails")
ResidualPattern <- c("Funnel shaped", "Funnel shaped", "Funnel shaped")
# Comparisondf <- cbind(Models,MSres,F_Stat,P_Value,Adj_R_Squared,Normality,ResidualPattern)
# colnames(Comparisondf) <- c("Model","MSres","F Stat","P Value", "Adj R^2", "Residuals Normality", "Residuals Pattern")
Comparisondf <- cbind(Models,MSres,F_Stat,P_Value,Adj_R_Squared)
colnames(Comparisondf) <- c("Model","MSres","F Stat","P Value", "Adj R^2")
# print table
knitr::kable(Comparisondf,caption = "Model comparison")
# pander::pander(Comparisondf)
library(tidyverse)
library(forcats)
# prepare dataframe with residuals
MLR_Model$Neighborhood <- trainFiltered$Neighborhood
MLR_Model$TotRmsAbvGrd <- trainFiltered$TotRmsAbvGrd
MLR_Model$KitchenQual <- trainFiltered$KitchenQual
MLR_Model$FirstFlrSF <- trainFiltered$FirstFlrSF
MLR_Model$SecondFlrSF <- trainFiltered$SecondFlrSF
MLR_Model$TotalSQFT <- trainFiltered$TotalSQFT
MLR_Model$SQFTNoBsmt <- trainFiltered$SQFTNoBsmt
# Boxplot of residuals by neighborhood - DO NOT KNOW HOW TO CREATE LEGENF FOR DASHED LINES
p <- ggplot(MLR_Model, mapping = aes(x = fct_reorder(Neighborhood,.std.resid), y= .std.resid, color = Neighborhood,guides(color = F)))
residboxplot <- p + geom_boxplot() + coord_flip() + theme_bw() + scale_colour_discrete(guide = FALSE)
residboxplot + geom_hline(yintercept = c(-1,0,1) , linetype = 'solid',color = 'grey') + geom_vline(xintercept = c(9.5,11.5), linetype = 'dashed',color =c('red','blue') ) + ylab("Standardized residuals") + xlab("Neighborhood")
# MAE by neighborhood
MAE_Neighborhood <- MLR_Model %>%
group_by(Neighborhood) %>%
summarise(MAE = mean(abs(.resid)),TotalSalePrice = sum(SalePrice), TotalLivArea = sum(GrLivArea), Tot.sqft = sum(TotalSQFT)) %>%
mutate(MeanPricePerSqft = TotalSalePrice/TotalLivArea) %>%
mutate(MeanPricePerSqft2 = TotalSalePrice/Tot.sqft)
p1 <- ggplot(data = MAE_Neighborhood, mapping = aes(x = MeanPricePerSqft2, y = MAE)) + geom_point() +  theme_bw() + xlab("Mean $/Sq.ft") + geom_smooth()
p2 <- ggplot(data = MAE_Neighborhood, mapping = aes(x = fct_reorder(Neighborhood,MeanPricePerSqft2), y = MeanPricePerSqft2)) + geom_point() + coord_flip() + theme_bw() + geom_hline(yintercept = c(60,70,80,90),linetype = "dashed", color = "red") + xlab("Neighborhood") + ylab("Mean $/Sq.ft")
grid.arrange(p1,p2,ncol=2)
# Grouping Neighborhoods
Less60Neigh <- MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 <= 60)]
Bet60_70 <-  MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 <= 70 & MAE_Neighborhood$MeanPricePerSqft2 > 60 )]
Bet70_80 <-  MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 <= 80 & MAE_Neighborhood$MeanPricePerSqft2 > 70 )]
Bet80_90 <-   MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 <= 90 & MAE_Neighborhood$MeanPricePerSqft2 > 80)]
Greater_90 <-   MAE_Neighborhood$Neighborhood[which(MAE_Neighborhood$MeanPricePerSqft2 > 90)]
trainFiltered$Tier1 <- ifelse(trainFiltered$Neighborhood %in% Less60Neigh,1,0)
trainFiltered$Tier2 <- ifelse(trainFiltered$Neighborhood %in% Bet60_70,1,0)
trainFiltered$Tier3 <- ifelse(trainFiltered$Neighborhood %in% Bet70_80, 1,0)
trainFiltered$Tier4 <- ifelse(trainFiltered$Neighborhood %in% Bet80_90, 1,0)
trainFiltered$Tier5 <- ifelse(trainFiltered$Neighborhood %in% Greater_90, 1,0)
tierdf <- data.frame(Tier = c(1,2,3,4,5), `Price per sq.ft` = c("<= 60", "> 60 and <= 70", "> 70 and <= 80", "> 80 and <= 90", " > 90"))
MLR_Neighborhoods <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF + GrLivArea + Tier1 + Tier2 + Tier3 + Tier4)
summary(MLR_Neighborhoods)
MLR_Neighborhoods_data <- broom::augment(MLR_Neighborhoods)
FtestsMLR_neighborhoods <- broom::glance(MLR_Neighborhoods)
# Plot of residuals
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
hist(MLR_Model$.resid, main = "Histogram of residuals", xlab = "Residuals")
qqnorm(MLR_Neighborhoods_data$.resid,title = "Normal Q-Q plot of residuals (Sale Price)")
qqline(MLR_Neighborhoods_data$.resid)
plot(MLR_Neighborhoods_data$TotalBsmtSF,MLR_Neighborhoods_data$.resid,main = "Residuals vs Total basement Area", xlab = "Total Basement area", ylab = "Residuals")
plot(MLR_Model$GrLivArea,MLR_Model$.resid,main = "Residuals vs Living Area", xlab = "Living Area above grade", ylab = "Residuals")
# Model comparison
Models_Neighborhood <- c("-502244.02 + 84.11 * TotalBsmtSF + 97.608 * GrLivArea",'85820 + 57.4 * TotalBsmtSF + 78.28*GrLivArea -1.2e+04*Tier1 -9.8e-04*Tier2 - 9.8e04*Tier3 - 2.97e04*Tier4')
MAE_comparison <- c(round(mean(abs(MLR_Model$.resid)),2),round(mean(abs(MLR_Neighborhoods_data$.resid)),2))
MSres_Neighborhood <- c(round(FtestsMLR$sigma,2),round(FtestsMLR_neighborhoods$sigma,2))
Adj_R_Squared_Neighborhood <- c(round(FtestsMLR$adj.r.squared,2),round(FtestsMLR_neighborhoods$adj.r.squared,2))
Comparisondf_Neighborhood <- cbind(Models_Neighborhood,MAE_comparison,MSres_Neighborhood,Adj_R_Squared_Neighborhood)
colnames(Comparisondf_Neighborhood) <- c("Model","MAE","MSres","Adj R^2")
# print table
pander::pandoc.table(Comparisondf_Neighborhood,caption = "Model comparison")
# trainFiltered$KitchenQual <- as.factor(trainFiltered$KitchenQual)
# trainFiltered$NeighRecode <- as.integer(as.factor(trainFiltered$Neighborhood))
# trainFiltered$RecodeKQ <- as.integer(trainFiltered$KitchenQual)
# table(trainFiltered$KitchenQual,trainFiltered$RecodeKQ)
# table(trainFiltered$Neighborhood,trainFiltered$KitchenQual)
# table(trainFiltered$NeighRecode,trainFiltered$KitchenQual)
trainFiltered$logLotArea <- log10(trainFiltered$LotArea)
ComplexModel <- lm(data = trainFiltered,SalePrice ~ TotalBsmtSF + GrLivArea + LotArea + TotalBath + Tier1 + Tier2 + Tier3 + Tier4)
summary(ComplexModel)
ComplexModel_Data <- broom::augment(ComplexModel)
qqnorm(ComplexModel_Data$.resid)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$LotArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBsmtSF)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$GrLivArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBath)
qqnorm(ComplexModel_Data$.resid)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$LotArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBsmtSF)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$GrLivArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBath)
plot(y =ComplexModel_Data$.resid, x = ComplexModel_Data$Tier1)
qqnorm(ComplexModel_Data$.resid)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$LotArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBsmtSF)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$GrLivArea)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBath)
plot(y =ComplexModel_Data$.resid, x = ComplexModel_Data$Tier1)
plot(y =ComplexModel_Data$.resid, x = ComplexModel_Data$Tier2)
plot(y =ComplexModel_Data$.resid, x = ComplexModel_Data$Tier3)
plot(y =ComplexModel_Data$.resid, x = ComplexModel_Data$Tier4)
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, 3, byrow = TRUE))
qqnorm(ComplexModel_Data$.resid)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$LotArea, xlab = 'Lot Area', y= 'Residuals')
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$LotArea, xlab = 'Lot Area', y= 'Residuals')
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, 3, byrow = TRUE))
qqnorm(ComplexModel_Data$.resid)
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$LotArea, xlab = 'Lot Area', ylab= 'Residuals')
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBsmtSF, xlab = 'Total basement area', ylab= 'Residuals')
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$GrLivArea, xlab = 'Above grade living area', ylab= 'Residuals')
plot(y = ComplexModel_Data$.resid, x = ComplexModel_Data$TotalBath, xlab = 'Total bathrooms', ylab= 'Residuals')
plot(y =ComplexModel_Data$.resid, x = ComplexModel_Data$Tier1, xlab = 'Tier 1 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_Data$.resid, x = ComplexModel_Data$Tier2, xlab = 'Tier 2 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_Data$.resid, x = ComplexModel_Data$Tier3, xlab = 'Tier 3 Neighborhood', ylab= 'Residuals')
plot(y =ComplexModel_Data$.resid, x = ComplexModel_Data$Tier4, xlab = 'Tier 4 Neighborhood', ylab= 'Residuals')
