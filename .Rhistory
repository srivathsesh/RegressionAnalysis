predictors_pca <- unlist(strsplit(formula_pca, split = "+",fixed = T))
Betas_pca <- paste(abs(coef_pca[2:length(coef_pca)]),"*", predictors_pca)
pcaeqn <- paste("VV = ",paste(coef_pca[1],paste(paste(signs_pca[2:length(signs_pca)], Betas_pca),collapse = " ")))
summary(pca.lm)
vifpc <- as.data.frame(vif(pca.lm))
vifpc$PC <- row.names(vifpc)
colnames(vifpc) <- c("VIF", "PC")
row.names(vifpc) <- NULL
knitr::kable(vifpc[,c("PC","VIF")], caption = "VIF of Principle components")
pca.lm.MAE <- mean(abs(pca.lm$residuals))
pca.test <- predict(pca.lm,newdata = test.scores)
pca.test.MAE <- mean(abs(test.scores$VV - pca.test))
MAEdf <- data.frame(Model = "PCA model", Train.MAE = pca.lm.MAE, Test.MAE = pca.test.MAE)
knitr::kable(MAEdf, caption = "MAE of PCA model")
set.seed(200)
returns$u <- runif(nrow(returns), min = 0 , max = 1)
returns.train <- subset(returns,u >= 0.7)
returns.test <- subset(returns, u < 0.7)
df <- cbind(Data = c("Training set", "Validation set","Total"), Samples = c(nrow(returns.train),nrow(returns.test),nrow(returns.train) + nrow(returns.test)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling of Raw returns")
# Arbitary model
model.1 <- lm(VV~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns.train)
coef_model.1 <- round(coef(model.1),5)
signs_model.1 <- ifelse(sign(coef_model.1)==1,"+","-")
formula_model.1 <- as.character(formula(model.1))[3]
predictors_model.1 <- unlist(strsplit(formula_model.1, split = "+",fixed = T))
Betas_model.1 <- paste(abs(coef_model.1[2:length(coef_model.1)]),"*", predictors_model.1)
model.1eqn <- paste("VV = ",paste(coef_model.1[1],paste(paste(signs_model.1[2:length(signs_model.1)], Betas_model.1),collapse = " ")))
#model.1 <- lm(VV~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns.train)
summary(model.1)
model1.train.MAE <- mean(abs(model.1$residuals))
model1.test <- predict(model.1, newdata = returns.test)
model1.test.MAE <- mean(abs(model1.test - returns.test$VV))
ArbMAEdf <- data.frame(Model = "Arbitary model", Train.MAE = model1.train.MAE, Test.MAE = model1.test.MAE)
knitr::kable(ArbMAEdf, caption = "MAE of Arbitary model")
# full model
model.2 <- lm(VV~ ., data = returns.train)
coef_model.2 <- round(coef(model.2),5)
signs_model.2 <- ifelse(sign(coef_model.2)==1,"+","-")
formula_model.2 <- as.character(formula(model.2))[3]
predictors_model.2 <- unlist(strsplit(formula_model.2, split = "+",fixed = T))
Betas_model.2 <- paste(abs(coef_model.2[2:length(coef_model.2)]),"*", predictors_model.2)
model.2eqn <- paste("VV = ",paste(coef_model.2[1],paste(paste(signs_model.2[2:length(signs_model.2)], Betas_model.2),collapse = " ")))
summary(model.2)
model2.train.MAE <- mean(abs(model.2$residuals))
model2.test <- predict(model.2, newdata = returns.test)
model2.test.MAE <- mean(abs(model2.test - returns.test$VV))
FullMAEdf <- data.frame(Model = "Full model", Train.MAE = model2.train.MAE, Test.MAE = model2.test.MAE)
knitr::kable(FullMAEdf, caption = "MAE of Full model")
models <- data.frame(Models = c("PCA","Arbitary","Full"), Equation = c(pcaeqn,model.1eqn,model.2eqn))
pander::pandoc.table(models, "Model equations",justify = "left",emphasixe.cols = 2)
ModelComp <- rbind(MAEdf,ArbMAEdf,FullMAEdf)
knitr::kable(ModelComp, caption = "Predictive performance of regression models")
full.lm <- lm(VV ~ ., data = train.scores)
summary(full.lm)
library(MASS)
backward.lm <- stepAIC(full.lm,direction = c('backward'),trace = F)
summary(backward.lm)
vif(backward.lm)
bkward.MAE.train <- mean(abs(backward.lm$residuals))
bkward.test <- predict(backward.lm,newdata = test.scores)
bkward.MAE.test <- mean(abs(bkward.test - test.scores$VV))
BkwardMAEdf <- data.frame(Train.MAE = bkward.MAE.train, Test.MAE = bkward.MAE.test)
ModelComp <- rbind(ModelComp,BkwardMAEdf)
BkwardMAEdf <- data.frame(Models = "Backward",Train.MAE = bkward.MAE.train, Test.MAE = bkward.MAE.test)
ModelComp <- rbind(ModelComp,BkwardMAEdf)
BkwardMAEdf <- data.frame(Model = "Backward",Train.MAE = bkward.MAE.train, Test.MAE = bkward.MAE.test)
ModelComp <- rbind(ModelComp,BkwardMAEdf)
full.lm <- lm(VV ~ ., data = train.scores)
summary(full.lm)
library(MASS)
backward.lm <- stepAIC(full.lm,direction = c('backward'),trace = F)
summary(backward.lm)
vif(backward.lm)
bkward.MAE.train <- mean(abs(backward.lm$residuals))
bkward.test <- predict(backward.lm,newdata = test.scores)
bkward.MAE.test <- mean(abs(bkward.test - test.scores$VV))
BkwardMAEdf <- data.frame(Model = "Backward",Train.MAE = bkward.MAE.train, Test.MAE = bkward.MAE.test)
ModelComp <- rbind(ModelComp,BkwardMAEdf)
knitr::kable(ModelComp,caption = "Comparison of regression models")
summary(full.lm)
summary(backward.lm)
vif(backward.lm)
ModelComp <- rbind(ModelComp,BkwardMAEdf)
knitr::kable(ModelComp,caption = "Comparison of regression models")
knitr::kable(ModelComp,caption = "Comparison of regression models")
source('~/.active-rstudio-document', echo=TRUE)
summary(model.2)
View(returns.train)
#model.1 <- lm(VV~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns.train)
summary(model.1)
model1.train.MAE <- mean(abs(model.1$residuals))
model1.test <- predict(model.1, newdata = returns.test)
model1.test.MAE <- mean(abs(model1.test - returns.test$VV))
ArbMAEdf <- data.frame(Model = "Arbitary model", Train.MAE = model1.train.MAE, Test.MAE = model1.test.MAE)
knitr::kable(ArbMAEdf, caption = "MAE of Arbitary model")
# full model
model.2 <- lm(VV~ ., data = returns.train[,-22])
coef_model.2 <- round(coef(model.2),5)
signs_model.2 <- ifelse(sign(coef_model.2)==1,"+","-")
formula_model.2 <- as.character(formula(model.2))[3]
predictors_model.2 <- unlist(strsplit(formula_model.2, split = "+",fixed = T))
Betas_model.2 <- paste(abs(coef_model.2[2:length(coef_model.2)]),"*", predictors_model.2)
model.2eqn <- paste("VV = ",paste(coef_model.2[1],paste(paste(signs_model.2[2:length(signs_model.2)], Betas_model.2),collapse = " ")))
r model.2eqn
model.2eqn
x <- c(0.80953,-0.29391,
0.77320,0.22745,
0.84034,-0.38175,
0.86334,-0.08200,
0.83342,0.34864,
0.65951, 0.49292,
0.76680, -0.21127)
y <- matrix(x,ncol = 2, byrow = T)
y
y %*% y
y %*% t(y)
knitr::opts_chunk$set(echo = F)
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
cor.matrix
isSymmetric.matrix(cor.matrix)
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
summary(f.1)
f.1
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
f.1
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3,rotation = "none")
f.1
x <- c(0.80953,-0.29391,
0.77320,0.22745,
0.84034,-0.38175,
0.86334,-0.08200,
0.83342,0.34864,
0.65951, 0.49292,
0.76680, -0.21127)
y <- matrix(x,ncol = 2, byrow = T)
f.1 <- factanal(covmat = y,n.obs = 1442,factors = 3,rotation = "none")
f.1 <- factanal(covmat = y,n.obs = 50,factors = 7,rotation = "none")
y
x
f.1
f.1 <- factanal(covmat = y,n.obs = 50,factors = 7)
colSum(f.1$loadings)
colSums(f.1$loadings)
colSums(f.1$loadings^2)
y
sum(y[,1]^2)
f.1
f.1 <- factanal(covmat = y,n.obs = 50,factors = 7,rotation = "none")
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3,rotation = "none")
f.1
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
f.1
knitr::opts_chunk$set(echo = T)
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1.loadings <- as.data.frame(f.1$loadings)
f.1.loadings <- data.frame(f.1$loadings)
f.1$loadings
.Last.value
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
f.1
test <- f.1$loadings
typeof(test)
rownames(test)
test
mode(test)
test[,1]
test[,2]
test[,3]
class(test)
broom::augment(f.1)
broom::augment_columns(f.1)
broom::augment_columns(f.1$loadings)
broom::augment(f.1$loadings)
as.matrix(f.1$loadings)
test <- as.matrix(f.1$loadings)
test
mode(test)
as.data.frame(test)
f1 <- f.1$loadings[,1]
f2 <- f.1$loadings[,2]
f3 < f.1$loadings[,3]
f3 <- f.1$loadings[,3]
f1
loadingsasdf <- function(x) (
ncol(test)
)
ncol(test)
seq(1:2)
loadingsasdf <- function(x) (
i <- 1:ncol(x)
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
loadingsasdf <- function(x) (
i <- 1:ncol(x);
knitr::opts_chunk$set(echo = T)
loadingsasdf <- function(x) (
i <- 1:ncol(x)
map_df(.x = i, .f = function(y) (x$loadings[,y]) )
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
loadingsasdf <- function(x) (
i <- 1:ncol(x)
map_df(.x = i, .f = function(y) (x$loadings[,y]) )
loadingsasdf <- function(x) (
i <- 1:ncol(x)
map_df(.x = i, .f = function(y) (x$loadings[,y]) )
i <- 1:ncol(cor.matrix)
i
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
loadingsasdf <- function(x) (
i <- 1:ncol(x)
map_df(.x = i, .f = function(y) (x$loadings[,y]) )
loadingsasdf <- function(x){
i <- 1:ncol(x)
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
loadingsasdf <- function(x){
i <- 1:ncol(x)
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
f.1
f.1$factors
class(f.1)
typeof(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factors
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:1
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:1
browser()
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf(f.1)
x
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:1
browser()
purrr::map(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf <- function(x){
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
purrr::map(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf(f.1)
as.data.frame(.Last.value)
View(.Last.value)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- apply(i,FUN = paste0("factor",i))
}
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- apply(i,FUN = function(x) paste0("factor",x))
}
loadingsasdf(f.1)
i <- 1:3
apply(i,FUN = function(x){paste0("Factor",x)})
lapply(i,FUN = function(x){paste0("Factor",x)})
sapply(i,FUN = function(x){paste0("Factor",x)})
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
}
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
return(df)
}
loadingsasdf(f.1)
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 4)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
return(df)
}
loadingsasdf(f.1)
f.1
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
library(magrittr)
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
df
df <- loadingsasdf(f.1)
df
dplyr::arrange(df,Factor1)
dplyr::arrange(df,Factor1,row.names = T)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
row.names<- NULL
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
df
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
row.names<- NULL
}
df <- loadingsasdf(f.1)
df
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
df <- loadingsasdf(f.1)
df
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
return(df)
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
df
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
df
3:1
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
return(df[,c(x$factor+1,1:x$factor)])
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
df
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
df
df$Names[order(df$Factor1)]
df$Names[order(df$Factor2)]
df$Names[order(df$Factor3)]
df$Names[order(df$Factor1,decreasing = T)]
df$Names[order(df$Factor2,decreasing = T)]
ggplot2::ggplot(data = df, mapping = ses(x = Factor1, y = Factor2)) + ggplot2::geom_point()
library(ggplot2)
ggplot(data = df, mapping = ses(x = Factor1, y = Factor2)) + ggplot2::geom_point()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2)) + ggplot2::geom_point()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2)) + ggplot2::geom_point() + geom_label(row.names(df))
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2)) + ggplot2::geom_point() + geom_text()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names)) + ggplot2::geom_point() + geom_text()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names)) + ggplot2::geom_point() + geom_text(size = 3)
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3)
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3) + theme_bw()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3) + theme_bw() + xlim(c(-1,1)) + ylim(c(-1,1))
df
df$Names[order(df$Factor2,decreasing = T)]
df$Names[order(df$Factor3,decreasing = T)]
knitr::opts_chunk$set(echo = T)
library(magrittr)
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
return(df[,c(x$factor+1,1:x$factor)])
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
library(ggplot2)
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3) + theme_bw() + xlim(c(-1,1)) + ylim(c(-1,1))
df$Names[order(df$Factor3,decreasing = T)]
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3,rotation = "varimax")
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
return(df[,c(x$factor+1,1:x$factor)])
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
library(ggplot2)
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3) + theme_bw() + xlim(c(-1,1)) + ylim(c(-1,1))
df$Names[order(df$Factor3,decreasing = T)]
df
df %>% dplyr::mutate_each_(funs = min,vars = c("Factor1"."Factor2", "Factor3"))
df %>% dplyr::mutate_each_(funs = min,vars = c("Factor1","Factor2", "Factor3"))
df %>% dplyr::mutate_each_(funs(min))
df %>% dplyr::mutate_each_(funs(min),vars = c("Factor1","Factor2", "Factor3"))
df %>% dplyr::rowwise() %>% dplyr::mutate(Min = min(Factor1,Factor2,Factor3))
df %>% dplyr::rowwise() %>% dplyr::mutate(Min = max(Factor1,Factor2,Factor3))
df  %>% dplyr::mutate(Min = max(Factor1,Factor2,Factor3))
df %>% dplyr::rowwise() %>% dplyr::mutate(Min = max(Factor1,Factor2,Factor3))
df %>% dplyr::mutate(Factor1 = abs(Factor1)) %>% dplyr::rowwise() %>% dplyr::mutate(Min = max(Factor1,Factor2,Factor3))
test <- c(.808,.444,.888,.712,.4117,.18581,.72214)
sum(test^2)
test <- c(test, 0.297,0.672,.250,.49441,.80410,0.80212,0.3337)
test
test <- matrix(test,ncol=2,byrow = T)
test
s8 <- test %*% t(test)
s8
diag(s8)
f.1$rotmat
f.1
purrr::map(.x = 1:6,.f = factanal(covmat = cor.matrix, n.obs = 1442,factors = .x))
purrr::map(.x = 1:6,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x, rotation = 'promax'))
purrr::map(.x = 1:6,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
FA <- purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
FA[[2]]
FA[[2]]$uniquenesses
diag(FA[[2]]$uniquenesses)
COVMAT <- FA[[2]]$loadings %*% t(FA[[2]]$loadings) + diag(FA[[2]]$uniquenesses)
mean(abs(cor.matrix - COVMAT))
FA <- purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x,rotation = "promax"))
FA[[5]]
FA <- purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
FA[[5]]
