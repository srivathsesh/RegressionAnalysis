i <- 1:ncol(x)
map_df(.x = i, .f = function(y) (x$loadings[,y]) )
i <- 1:ncol(cor.matrix)
i
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
loadingsasdf <- function(x) (
i <- 1:ncol(x)
map_df(.x = i, .f = function(y) (x$loadings[,y]) )
loadingsasdf <- function(x){
i <- 1:ncol(x)
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
loadingsasdf <- function(x){
i <- 1:ncol(x)
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
f.1
f.1$factors
class(f.1)
typeof(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factors
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:1
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:1
browser()
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf(f.1)
x
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:1
browser()
purrr::map(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf <- function(x){
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
purrr::map(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf(f.1)
as.data.frame(.Last.value)
View(.Last.value)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
purrr::map_df(.x = i, .f = function(y) (x$loadings[,y]) )
}
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- apply(i,FUN = paste0("factor",i))
}
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- apply(i,FUN = function(x) paste0("factor",x))
}
loadingsasdf(f.1)
i <- 1:3
apply(i,FUN = function(x){paste0("Factor",x)})
lapply(i,FUN = function(x){paste0("Factor",x)})
sapply(i,FUN = function(x){paste0("Factor",x)})
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
}
loadingsasdf(f.1)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
return(df)
}
loadingsasdf(f.1)
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 4)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
return(df)
}
loadingsasdf(f.1)
f.1
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
library(magrittr)
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
df
df <- loadingsasdf(f.1)
df
dplyr::arrange(df,Factor1)
dplyr::arrange(df,Factor1,row.names = T)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
row.names<- NULL
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
df
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
row.names<- NULL
}
df <- loadingsasdf(f.1)
df
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
df <- loadingsasdf(f.1)
df
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
return(df)
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(Factor1)
df
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
df
3:1
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
return(df[,c(x$factor+1,1:x$factor)])
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
df
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
df
df$Names[order(df$Factor1)]
df$Names[order(df$Factor2)]
df$Names[order(df$Factor3)]
df$Names[order(df$Factor1,decreasing = T)]
df$Names[order(df$Factor2,decreasing = T)]
ggplot2::ggplot(data = df, mapping = ses(x = Factor1, y = Factor2)) + ggplot2::geom_point()
library(ggplot2)
ggplot(data = df, mapping = ses(x = Factor1, y = Factor2)) + ggplot2::geom_point()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2)) + ggplot2::geom_point()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2)) + ggplot2::geom_point() + geom_label(row.names(df))
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2)) + ggplot2::geom_point() + geom_text()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names)) + ggplot2::geom_point() + geom_text()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names)) + ggplot2::geom_point() + geom_text(size = 3)
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3)
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3) + theme_bw()
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3) + theme_bw() + xlim(c(-1,1)) + ylim(c(-1,1))
df
df$Names[order(df$Factor2,decreasing = T)]
df$Names[order(df$Factor3,decreasing = T)]
knitr::opts_chunk$set(echo = T)
library(magrittr)
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3)
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
return(df[,c(x$factor+1,1:x$factor)])
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
library(ggplot2)
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3) + theme_bw() + xlim(c(-1,1)) + ylim(c(-1,1))
df$Names[order(df$Factor3,decreasing = T)]
cor.values <- c(1.000,0.210,0.370,-0.32,0.000,-0.31,-0.26,0.090,-0.38, 0.210,1.000,0.090,-0.29,0.120,-0.30,-0.14,0.010,-0.39, 0.370,0.090,1.000,-0.31,-0.04,-0.30,-0.11,0.120,-0.39,
-0.32,-0.29,-0.31,1.00,-0.16,0.25,-0.13,-0.14,0.900, 0.00,0.120,-0.04,-0.16,1.000,-0.20,-0.03,-0.08,-0.38, -0.31,-0.30,-0.30,0.25,-0.20,1.000,-0.24,-0.16,0.180, -0.26,-0.14,-0.11,-0.13,-0.03,-0.24,1.000,-0.20,0.040, 0.090,0.010,0.120,-0.14,-0.08,-0.16,-0.20,1.000,-0.24, -0.38,-0.39,-0.39,0.900,-0.38,0.180,0.040,-0.24,1.000 )
# Get correlation values into a matrix
cor.matrix <- matrix(cor.values, nrow= 9, ncol = 9, byrow = T)
colnames(cor.matrix) <- c("Calvados", "Armagnac","Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
rownames(cor.matrix) <- c("Calvados", "Armagnac", "Cognac", "Kirsch", "Marc", "Mirabelle", "Rum", "Whiskey","Liquers")
cor.matrix
f.1 <- factanal(covmat = cor.matrix,n.obs = 1442,factors = 3,rotation = "varimax")
loadingsasdf <- function(x){
if(class(x) != "factanal") { stop("input must be of the class factanal")}
i <- 1:x$factor
df <- as.data.frame(purrr::map(.x = i, .f = function(y) (x$loadings[,y])))
colnames(df) <- sapply(i,FUN = function(x){paste0("Factor",x)})
df$Names <- row.names(df)
return(df[,c(x$factor+1,1:x$factor)])
}
df <- loadingsasdf(f.1) %>%
dplyr::arrange(desc(Factor1))
library(ggplot2)
ggplot(data = df, mapping = aes(x = Factor1, y = Factor2,label = Names,color = Names)) + ggplot2::geom_point() + geom_text(size = 3) + theme_bw() + xlim(c(-1,1)) + ylim(c(-1,1))
df$Names[order(df$Factor3,decreasing = T)]
df
df %>% dplyr::mutate_each_(funs = min,vars = c("Factor1"."Factor2", "Factor3"))
df %>% dplyr::mutate_each_(funs = min,vars = c("Factor1","Factor2", "Factor3"))
df %>% dplyr::mutate_each_(funs(min))
df %>% dplyr::mutate_each_(funs(min),vars = c("Factor1","Factor2", "Factor3"))
df %>% dplyr::rowwise() %>% dplyr::mutate(Min = min(Factor1,Factor2,Factor3))
df %>% dplyr::rowwise() %>% dplyr::mutate(Min = max(Factor1,Factor2,Factor3))
df  %>% dplyr::mutate(Min = max(Factor1,Factor2,Factor3))
df %>% dplyr::rowwise() %>% dplyr::mutate(Min = max(Factor1,Factor2,Factor3))
df %>% dplyr::mutate(Factor1 = abs(Factor1)) %>% dplyr::rowwise() %>% dplyr::mutate(Min = max(Factor1,Factor2,Factor3))
test <- c(.808,.444,.888,.712,.4117,.18581,.72214)
sum(test^2)
test <- c(test, 0.297,0.672,.250,.49441,.80410,0.80212,0.3337)
test
test <- matrix(test,ncol=2,byrow = T)
test
s8 <- test %*% t(test)
s8
diag(s8)
f.1$rotmat
f.1
purrr::map(.x = 1:6,.f = factanal(covmat = cor.matrix, n.obs = 1442,factors = .x))
purrr::map(.x = 1:6,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x, rotation = 'promax'))
purrr::map(.x = 1:6,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
FA <- purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
FA[[2]]
FA[[2]]$uniquenesses
diag(FA[[2]]$uniquenesses)
COVMAT <- FA[[2]]$loadings %*% t(FA[[2]]$loadings) + diag(FA[[2]]$uniquenesses)
mean(abs(cor.matrix - COVMAT))
FA <- purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x,rotation = "promax"))
FA[[5]]
FA <- purrr::map(.x = 1:5,.f = function(x) factanal(covmat = cor.matrix, n.obs = 1442,factors = x))
FA[[5]]
plot(cars)
library("MVA")
demo("Ch-PCA")
eigen(blood_pcacov)
eigen(blood_cov)
x <- eigen(blood_pcacov)
x <- eigen(blood_cov)
x$values
x$values[1]
41.2877486^2
library("MVA")
demo("Ch-Clustering")
demo("Ch-CA")
View(measure)
dist(measure[,1:3])
saveRDS(measure,file = "measure.RDS")
load('measure.RDS')
demo("Ch-CA")
saveRDS(measure,file = "measure.RDS")
readRDS('measure.RDS')
install.packages("plotly")
View(measure)
plotly::plot_ly(data = measure, x = chest, y = waist, z = hips, color = gender)
plotly::plot_ly(data = measure, x = ~chest, y = ~waist, z = ~hips, color = gender)
plotly::plot_ly(data = measure, x = ~chest, y = ~waist, z = ~hips, color = ~gender)
plotly::plot_ly(data = measure, x = ~chest, y = ~waist, z = ~hips, color = ~gender,type = "scatter")
plotly::plot_ly(data = measure, x = ~chest, y = ~waist, z = ~hips, color = ~gender,type = "scatter3d")
knitr::opts_chunk$set(echo = TRUE)
measure <- readRDS('measure.RDS')
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers)
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers)
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers)
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
plotly_POST(p, filename = "r-clusterAnalysis")
p
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers)
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
plotly_POST(p, filename = "r-clusterAnalysis")
p
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers)
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
plotly_POST(p, filename = "r-clusterAnalysis")
p
p
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers)
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
plotly_POST(p, filename = "r-clusterAnalysis")
p
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers')
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
plotly_POST(p, filename = "r-clusterAnalysis")
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers')
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
plot_ly::plotly_POST(p, filename = "r-clusterAnalysis")
knitr::opts_chunk$set(echo = TRUE)
measure <- readRDS('measure.RDS')
library(plotly)
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers')
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
plotly_POST(p, filename = "r-clusterAnalysis")
api_create(p, filename = "r-clusterAnalysis")
p <- plotly::plot_ly(x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers')
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
api_create(p, filename = "r-clusterAnalysis")
p <- plotly::plot_ly(data = measure, x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers')
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
api_create(p, filename = "r-clusterAnalysis")
p <- plotly::plot_ly(data = measure, x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers',color = ~gender)
Sys.setenv("plotly_username"="srivathsesh")
Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
api_create(p, filename = "r-clusterAnalysis")
dm <- dist(measure)
dm
View(measure)
dm <- dist(measure[,1:3])
dm
sqrt(38)
cutree(single,h = 3.8)
single <- hclust(dm,method = "single")
cutree(single,h = 3.8)
Complete <- hclust(dm,method = "complete")
cutree(Complete,h = 10)
Average <- hclust(dm,method = "average")
cutree(Average,h = 8)
knitr::opts_chunk$set(echo = TRUE)
measure <- readRDS('measure.RDS')
library(plotly)
library(graphics)
p <- plotly::plot_ly(data = measure, x = ~chest, y = ~waist, z = ~hips , type = 'scatter3d',mode = 'markers',color = ~gender)
# Sys.setenv("plotly_username"="srivathsesh")
# Sys.setenv("plotly_api_key"="0Sr49roqMwTtuQl3JZ9G")
# api_create(p, filename = "r-clusterAnalysis")
# knitr::include_graphics('https://plot.ly/~srivathsesh/5.embed')
p
# create a matrix of the euclidean distances
dm <- dist(measure[1:3], method = "euclidean" )
single <- hclust(dm,method = "single")
plot(single,main = "Single")
Complete <- hclust(dm,method = "complete")
plot(Complete,main =  "Complete")
Average <- hclust(dm,method = "average")
#plot(as.dendrogram(Average),main = "Average",horiz = T)
plot(Average,main = "Average")
pc <- princomp(measure[,1:3],cor = T)
summary(pc)
pc2 <- princomp(dm, cor = T)
summary(pc2)
measure$pc1 <- pc$scores[,1]
measure$pc2 <- pc$scores[,2]
measure$dmpc1 <- pc2$scores[,1]
measure$dmpc2 <- pc2$scores[,2]
measure$single <- cutree(single,h = 3.6)
measure$complete <- cutree(Complete, h = 10)
measure$avg <- cutree(Average, h = 7.9)
plot_ly(data = measure,x = ~pc1, y = ~pc2, color = ~gender, type = 'scatter', mode = 'markers',colors = "Set1") %>%
add_text(text = measure$avg, textposition = "top right",showlegend = F) %>%
layout(title = 'PCA using raw data and class labels based on Average')
plot_ly(data = measure,x = ~dmpc1, y = ~dmpc2, color = ~gender, type = 'scatter', mode = 'markers',colors = "Set1") %>%
add_text(text = measure$avg, textposition = "top right",showlegend = F) %>%
layout(title = 'PCA using Eucleadian distances and class labels based on Average')
pc
summary(pc)
pc$loadings
knitr::opts_chunk$set(echo = F,tidy.opts=list(width.cutoff=70),tidy=TRUE)
library(magrittr)
library(ggplot2)
# read data in
stocks <- read.csv(file = 'stock_portfolio.csv', header = T)
# format date & sort chronologically
stocks$Date <- as.Date(stocks$Date,'%d -%b-%y')
stocks <- stocks %>%
dplyr::arrange(Date)
# get log-returns of the data
logreturns <- function(x) {
log(x[-1]/x[-length(x)])
}
returns <- purrr::map_df(.x = stocks[,-1], .f = logreturns)
# compute correlations table
correlations <- as.data.frame(cor(returns))
# get only VV
library(ggplot2)
library(forcats)
VV_cor <- as.data.frame(correlations$VV[-nrow(correlations)])
colnames(VV_cor) <- "VV"
rownames(VV_cor) <- rownames(correlations)[-21]
ggplot(data = VV_cor, mapping = aes(x = fct_reorder(rownames(VV_cor),VV), y = VV)) + geom_col() + coord_flip() + xlab("Stock Index") + ylab("Correlation")
#+ ggtitle ("                                       Correlations with VV")
corrplot::corrplot(corr = as.matrix(correlations))
library(car)
# somemodel
RandomModel <- lm(VV ~ GS+DD+DOW+HON+HUN +JPM + KO + MMM+ XOM, data = returns)
summary(RandomModel)
vifrandom <- as.data.frame(sort(car::vif(RandomModel),decreasing = T))
vifrandom$Model <- "Arbitary model"
vifrandom$Predictors <- row.names(vifrandom)
colnames(vifrandom) <- c("VIF", "Model", "Predictors")
# fullmodel
form <- paste0(colnames(correlations)[-21],collapse = "+")
fullmodel <- lm(VV~., data = returns)
summary(fullmodel)
viffm <- as.data.frame(sort(car::vif(fullmodel), decreasing = T))
viffm$Model <- "Full Model"
viffm$Predictors <- row.names(viffm)
colnames(viffm) <- c("VIF", "Model","Predictors")
VIF <- rbind(vifrandom, viffm, row.names = F)
VIFReport <- VIF[1:nrow(VIF)-1,] %>% dplyr::group_by(Model) %>%
dplyr::top_n(n =5,wt = VIF)
VIFReport <- VIFReport[,c("Model","Predictors","VIF")]
knitr::kable(VIFReport, format = "latex",caption = "Top 5 VIF by model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 1)
returns.pca <- princomp(returns[,-21], cor = T)
pc.1 <- returns.pca$loadings[,1]
pc.2 <- returns.pca$loadings[,2]
pcs <- data.frame(pc.1,pc.2,names(pc.1))
colnames(pcs) <- c("PC1","PC2","Index")
pcs$Industry <- c("Indus Metal"
, "Banking"
, "Oil Field Services"
, "Oil Refining"
, "Industrial Chemical"
, "Industrial Chemical"
, "Soft Drinks"
, "Banking"
, "Oil Field Services"
, "Oil Refining"
, "Manufacturing"
, "Industrial Chemical"
, "Banking"
, "Soft Drinks"
, "Manufacuring"
, "Oil Refining"
,"Soft Drinks"
, "Oil Field Services"
, "Banking"
, "Oil Refining"
)
ggplot(data = pcs,mapping = aes(x = PC1,y = PC2,label = Index,color = Industry)) + geom_point() + geom_text(size = 3) + theme_bw() + xlim(c(-0.27,-0.12)) + ylim(c(-0.27,0.6))
summary(returns.pca)
returns.pca$loadings
pc$loadings
pc <- princomp(measure[,1:3],cor = F)
summary(pc)
pc$loadings
summary(measure[,1:3])
summarise(measure[,1:3])
dplyr::summarise(measure[,1:3])
View(measure)
dplyr::summarise_each(measure[,1:3], sd)
dplyr::summarise_all(measure[,1:3], sd)
