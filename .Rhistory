# printing on pdf
knitr::kable(matrix(c(colsofinterest[2:23],"",""),ncol = 3,byrow = F), caption = "Predictors of interest")
tierdf <- data.frame(Tier = c(1,2,3,4), `Price per sq.ft` = c("<= 60", "> 60 and <= 70", "> 70 and <= 80", "> 80 and <= 90"))
Lotconfigdf <- data.frame(Indicator = c("CornerLot", "CulDSac", "Frontal2", "Frontal3"), Description = c("Corner lot", "CulDSac Lot", "2 frontal lot", "3 frontal lot") )
Bldgtypedf <- data.frame(Indicator = c("TwnhsE","Twnhs","Duplex","fam2"),Decription = c("Townhouse", "Twin house", "Duplex", "2 family conversion"))
KitchenQualdf <- data.frame(Indicator = c("KTA", "KGD", "KEx", "KFa"),Decription = c("Typical/Average", "Good", "Excellent", "Fair"))
Predictors <- c('LotArea'
,'YearRemodel'
, 'TotalBsmtST'
, 'GrLivArea'
, 'TotalBath'
, 'TotalSQFT'
, 'QualityIndex'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'YearMonthSold'
, 'Tier1'
, 'Tier2'
, 'Tier3'
, 'Tier4'
, 'Tier5'
, 'PartialSaleCond'
, 'CornerLot'
, 'CulDSac'
, 'Frontal2'
, 'Frontal3'
, 'TwnhsE'
, 'Twnhs'
, 'Duplex'
, 'fam2'
, 'KTA'
, 'KGD'
, 'KEx'
, 'KFa'
)
knitr::kable(tierdf, caption = "Neighborhood tiers,base category > 90")
knitr::kable(Lotconfigdf, caption = "Lot configuration indicator variables; base category: Inside Lot")
knitr::kable(Bldgtypedf, caption = "Building type indicator variables; base category: single family")
knitr::kable(KitchenQualdf, caption = "Kitchen Quality indicator variables; base category: poor")
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath) %>%
dplyr::mutate(TotalSQFT = TotalBsmtSF + FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(SQFTNoBsmt = FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(QualityIndex = OverallQual*OverallCond) %>%
dplyr::mutate(YearMonthSold = YrSold + MoSold/100) %>%
dplyr::mutate(u = runif(nrow(SampleFrame)))
# -----------------------------Grouping Neighborhoods-----------------------------------------------
NeighborhoodGrps <- SampleFrame %>%
dplyr:: select(Neighborhood,SalePrice,TotalSQFT) %>%
dplyr::group_by(Neighborhood) %>%
dplyr::summarise(TotalSalePrice = sum(SalePrice), Total.SQFT = sum(TotalSQFT),PricePerSqFt = TotalSalePrice/Total.SQFT)
Less60Neigh <- NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt <= 60)]
Bet60_70 <-  NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt <= 70 & NeighborhoodGrps$PricePerSqFt > 60 )]
Bet70_80 <-  NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt <= 80 & NeighborhoodGrps$PricePerSqFt > 70 )]
Bet80_90 <-   NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt <= 90 & NeighborhoodGrps$PricePerSqFt > 80)]
Greater_90 <-   NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt > 90)]
SampleFrame$Tier1 <- ifelse(SampleFrame$Neighborhood %in% Less60Neigh,1,0)
SampleFrame$Tier2 <- ifelse(SampleFrame$Neighborhood %in% Bet60_70,1,0)
SampleFrame$Tier3 <- ifelse(SampleFrame$Neighborhood %in% Bet70_80, 1,0)
SampleFrame$Tier4 <- ifelse(SampleFrame$Neighborhood %in% Bet80_90, 1,0)
#SampleFrame$Tier5 <- ifelse(SampleFrame$Neighborhood %in% Greater_90, 1,0)
tierdf <- data.frame(Tier = c(1,2,3,4,5), `Price per sq.ft` = c("<= 60", "> 60 and <= 70", "> 70 and <= 80", "> 80 and <= 90", " > 90"))
#-------------------------------------------------------------------------------------------------------
#------------------------------Creating indicator variables --------------------------------------------
# IV for LotConfig, base Inside lot
SampleFrame$CornerLot <- ifelse(SampleFrame$LotConfig == "Corner",1,0)
SampleFrame$CulDSac <- ifelse(SampleFrame$LotConfig == "CulDSac",1,0)
SampleFrame$Frontal2 <- ifelse(SampleFrame$LotConfig == "FR2",1,0)
SampleFrame$Frontal3 <- ifelse(SampleFrame$LotConfig == "F3",1,0)
Lotconfigdf <- data.frame(Indicator = c("CornerLot", "CulDSac", "Frontal2", "Frontal3"), Description = c("Corner lot", "CulDSac Lot", "2 frontal lot", "3 frontal lot") )
# IV for BlgType, base "1Fam"
SampleFrame$TwnhsE <- ifelse(SampleFrame$BldgType == "TwnhsE",1,0)
SampleFrame$Twnhs <- ifelse(SampleFrame$BldgType == "Twnhs", 1,0)
SampleFrame$Duplex <- ifelse(SampleFrame$BldgType == "Duplex", 1,0)
SampleFrame$fam2 <- ifelse(SampleFrame$BldgType == "2famCon",1,0)
Bldgtypedf <- data.frame(Indicator = c("TwnhsE","Twnhs","Duplex","fam2"),Decription = c("Townhouse", "Twin house", "Duplex", "2 family conversion"))
# IV for SaleCondition, bae "Normal"
SampleFrame$PartialSaleCond <- ifelse(SampleFrame$SaleCondition == "Partial",1,0)
# IV for KitchenQual
SampleFrame$KTA <- ifelse(SampleFrame$KitchenQual == "TA", 1,0)
SampleFrame$KGD <- ifelse(SampleFrame$KitchenQual == "Gd", 1,0)
SampleFrame$KEx <- ifelse(SampleFrame$KitchenQual == "Ex", 1,0)
SampleFrame$KFa <- ifelse(SampleFrame$KitchenQual == "Fa", 1,0)
KitchenQualdf <- data.frame(Indicator = c("KTA", "KGD", "KEx", "KFa"),Decription = c("Typical/Average", "Good", "Excellent", "Fair"))
# --------------------------------------------------------------------------------------------------------------
Predictors <- c('LotArea'
,'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'TotalBath'
, 'TotalSQFT'
, 'QualityIndex'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'YearMonthSold'
, 'Tier1'
, 'Tier2'
, 'Tier3'
, 'Tier4'
, 'PartialSaleCond'
, 'CornerLot'
, 'CulDSac'
, 'Frontal2'
# , 'Frontal3'
, 'TwnhsE'
, 'Twnhs'
, 'Duplex'
#,'fam2'
, 'KTA'
, 'KGD'
, 'KEx'
# , 'KFa'
)
# training set
#train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
train <- subset(SampleFrame , u < 0.7)
train <- train %>% dplyr::arrange(SID)
train.Clean <- train %>% dplyr::select(c(Predictors,'SalePrice'))
# Validation set
#Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- subset(SampleFrame, u > 0.7)
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set","Total"), Samples = c(nrow(train),nrow(Validation),nrow(train) + nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
knitr::kable(matrix(Predictors,ncol = 4), caption = "Predictors for linear regression models")
# upper model as full model
upper.lm <- lm(data = train.Clean,SalePrice ~ .)
coefs <- round(coefficients(upper.lm),2)
signs <- ifelse(sign(coefs)==1,"+", "-")
Betas <- paste(abs(coefs[2:length(coefs)]),"*",Predictors)
uppereqn <- paste("SalePrice = ",paste(coefs[1],paste(paste(signs[2:24], Betas),collapse = " ")))
options(scipen = 0)
summary(upper.lm)
# lower model as the intercept model
lower.lm <- lm(data = train.Clean, SalePrice ~ 1)
# print summary for InterceptModel
summary(lower.lm)
# model to initate a stepwise regression
sqft.lm <- lm(data = train.Clean, SalePrice ~ TotalSQFT)
coef_IM <- round(coef(sqft.lm),2)
signs_IM <- ifelse(sign(coef_IM)==1,"+","-")
Betas_IM <- paste(abs(coef_IM[2:length(coef_IM)]),"*","TotalSQFT")
lowereqn <- paste("SalePrice = ",paste(coef_IM[1],paste(paste(signs_IM[2:2], Betas_IM),collapse = " ")))
summary(sqft.lm)
# forward selection
forward.lm <- MASS::stepAIC(object = lower.lm,scope = list(upper = formula(upper.lm), lower = ~1), direction = "forward",trace = F)
coef_Fwd <- round(coef(forward.lm),2)
signs_Fwd <- ifelse(sign(coef_Fwd)==1,"+","-")
formula_Fwd <- as.character(formula(forward.lm))[3]
predictors_Fwd <- unlist(strsplit(formula_Fwd, split = "+",fixed = T))
Betas_Fwd <- paste(abs(coef_Fwd[2:length(coef_Fwd)]),"*",predictors_Fwd)
fwdeqn <- paste("SalePrice = ",paste(coef_Fwd[1],paste(paste(signs_Fwd[2:length(signs_Fwd)], Betas_Fwd),collapse = " ")))
options(scipen = 0)
summary.lm(forward.lm)
# Backward selection
backward.lm <- MASS::stepAIC(object = upper.lm, direction = "backward",trace = F)
coef_Bwd <- round(coef(backward.lm),2)
signs_Bwd <- ifelse(sign(coef_Bwd)==1,"+","-")
formula_Bwd <- as.character(formula(backward.lm))[3]
predictors_Bwd <- unlist(strsplit(formula_Bwd, split = "+",fixed = T))
Betas_Bwd <- paste(abs(coef_Bwd[2:length(coef_Bwd)]),"*",predictors_Bwd)
Bwdeqn <- paste("SalePrice = ",paste(coef_Bwd[1],paste(paste(signs_Bwd[2:length(signs_Bwd)], Betas_Bwd),collapse = " ")))
summary.lm(backward.lm)
# stepwise
stepwise.lm <- MASS::stepAIC(object = sqft.lm,scope = list(upper = formula(upper.lm), lower = ~1),direction = "both", trace = F)
coef_Stp <- round(coef(stepwise.lm),2)
signs_Stp <- ifelse(sign(coef_Stp)==1,"+","-")
formula_Stp <- as.character(formula(stepwise.lm))[3]
predictors_Stp <- unlist(strsplit(formula_Stp, split = "+",fixed = T))
Betas_Stp <- paste(abs(coef_Stp[2:length(coef_Stp)]),"*",predictors_Stp)
Stpeqn <- paste("SalePrice = ",paste(coef_Stp[1],paste(paste(signs_Stp[2:length(signs_Stp)], Betas_Stp),collapse = " ")))
summary(stepwise.lm)
#junkmodel
junk.lm <- lm(SalePrice ~ OverallQual + OverallCond + QualityIndex + GrLivArea + TotalSQFT, data = train)
coef_Jnk <- round(coef(junk.lm),2)
signs_Jnk <- ifelse(sign(coef_Jnk)==1,"+","-")
formula_Jnk <- as.character(formula(junk.lm))[3]
predictors_Jnk <- unlist(strsplit(formula_Jnk, split = "+",fixed = T))
Betas_Jnk <- paste(abs(coef_Jnk[2:length(coef_Jnk)]),"*",predictors_Jnk)
Jnkeqn <- paste("SalePrice = ",paste(coef_Jnk[1],paste(paste(signs_Jnk[2:length(signs_Jnk)], Betas_Jnk),collapse = " ")))
summary(junk.lm)
broom::glance(junk.lm)
anova(junk.lm)
sqrt(9.7133e+08)
junkmodel <- broom::augment(junk.lm)
(junkmodel$.resid^2)/nrow(junkmodel)
sum(junkmodel$.resid^2)/nrow(junkmodel)
sum(junkmodel$.resid)/nrow(junkmodel)
sum(abs(junkmodel$.resid))/nrow(junkmodel)
junkmetrics <- broom::glance(junk.lm)
junkmodel <- broom::augment(junk.lm)
junkmetrics$MAE <- mean(abs(junkmetrics$.resid))
junkmetrics$MAE <- mean(abs(junkmodels$.resid))
junkmetrics$MAE <- mean(abs(junkmodel$.resid))
junkmetrics$MSE <- mean(junkmodel$.resid ^2)
junkmetrics$MAE
junkmetrics$MSE <- mean(junkmodel$.resid ^2)
stepwisemetrics <- broom::glance(stepwise.lm)
stepwisemodel <- broom::augment(stepwise.lm)
stepwisemetrics$MAE <- mean(abs(stepwisemodel$.resid))
stepwisemetrics$MSE <- mean(stepwisemodel$.resid ^2)
comparison <- rbind(junkmetrics,forwardmetrics,backwardmetrics,stepwisemetrics)
junkmetrics <- broom::glance(junk.lm)
junkmodel <- broom::augment(junk.lm)
junkmetrics$MAE <- mean(abs(junkmodel$.resid))
junkmetrics$MSE <- mean(junkmodel$.resid ^2)
forwardmetrics <- broom::glance(forward.lm)
forwardmodel <- broom::augment(forward.lm)
forwardmetrics$MAE <- mean(abs(forwardmodel$.resid))
forwardmetrics$MSE <- mean(forwardmodel$.resid ^2)
backwardmetrics <- broom::glance(backward.lm)
backwardmodel <- broom::augment(backward.lm)
backwardmetrics$MAE <- mean(abs(backwardmodel$.resid))
backwardmetrics$MSE <- mean(backwardmodel$.resid ^2)
stepwisemetrics <- broom::glance(stepwise.lm)
stepwisemodel <- broom::augment(stepwise.lm)
stepwisemetrics$MAE <- mean(abs(stepwisemodel$.resid))
stepwisemetrics$MSE <- mean(stepwisemodel$.resid ^2)
comparison <- rbind(junkmetrics,forwardmetrics,backwardmetrics,stepwisemetrics)
comparison$model <- c("Junk", "Forward Selection", "Backward Elimination", "Stepwise")
comparison <- comparison %>%
dplyr::select(model,adj.r.squared,AIC,BIC,MSE, MAE)
knitr::opts_chunk$set(echo = F,tidy.opts=list(width.cutoff=60),tidy=TRUE)
ames <- readr::read_delim(file = 'ames_housing_data.csv', delim = ",")
# chamge from scientic notations, to restore to default options(scipen = 0)
options(scipen = 999)
library(magrittr)
LivingAreaCutoff <- 800
# Adding drop conditions varaible
# insert dummy variable to code SaleCondition being either equal to 'Normal' or 'Partial'
ames$Sale_NrmPar <- ifelse(ames$SaleCondition == 'Normal' | ames$SaleCondition == 'Partial', 1,0)
ames$DropCondition <- ifelse(ames$Zoning!='RL','01: Not LowDensityZone',
ifelse(ames$Sale_NrmPar == 0,'02: Not Normal/Partial Sale',
ifelse(ames$Street!='Pave','03: Street Not Paved',
ifelse(ames$GrLivArea <LivingAreaCutoff,'04: Less than 800 SqFt',
ifelse(ames$TotalBsmtSF <1,'05: No Basement',
ifelse(ames$GrLivArea > 4000, '06: Greater 4000 sqft living Area - Influence Points',
ifelse(ames$GarageArea > 1000, '07:Garage area greater than 1000 sqft - Influence points',
'99: Eligible Sample')
))))))
# Waterfall
waterfall <- ames %>%
dplyr::group_by(DropCondition) %>%
dplyr::summarise(counts=n())
# Print waterfall table
knitr::kable(waterfall, align = c("l", "r"),caption = "Drop waterfall")
# Define training portion of the data
trainPercent <- round(0.7,1)
# Columns of interest
colsofinterest <- c('SID'
,'LotArea'
, 'LotConfig'
, 'Neighborhood'
, 'BldgType'
, 'OverallCond'
, 'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'BsmtFullBath'
, 'BsmtHalfBath'
, 'FullBath'
, 'HalfBath'
, 'BedroomAbvGr'
, 'KitchenQual'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'MoSold'
, 'YrSold'
, 'SaleCondition'
, 'FirstFlrSF'
, 'SecondFlrSF'
, 'OverallQual'
, 'SalePrice')
# Cleanly show the columns of interest in pdf. Making the colsofinterest as matrix for easy printing
# printing on pdf
knitr::kable(matrix(c(colsofinterest[2:23],"",""),ncol = 3,byrow = F), caption = "Predictors of interest")
tierdf <- data.frame(Tier = c(1,2,3,4), `Price per sq.ft` = c("<= 60", "> 60 and <= 70", "> 70 and <= 80", "> 80 and <= 90"))
Lotconfigdf <- data.frame(Indicator = c("CornerLot", "CulDSac", "Frontal2", "Frontal3"), Description = c("Corner lot", "CulDSac Lot", "2 frontal lot", "3 frontal lot") )
Bldgtypedf <- data.frame(Indicator = c("TwnhsE","Twnhs","Duplex","fam2"),Decription = c("Townhouse", "Twin house", "Duplex", "2 family conversion"))
KitchenQualdf <- data.frame(Indicator = c("KTA", "KGD", "KEx", "KFa"),Decription = c("Typical/Average", "Good", "Excellent", "Fair"))
Predictors <- c('LotArea'
,'YearRemodel'
, 'TotalBsmtST'
, 'GrLivArea'
, 'TotalBath'
, 'TotalSQFT'
, 'QualityIndex'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'YearMonthSold'
, 'Tier1'
, 'Tier2'
, 'Tier3'
, 'Tier4'
, 'Tier5'
, 'PartialSaleCond'
, 'CornerLot'
, 'CulDSac'
, 'Frontal2'
, 'Frontal3'
, 'TwnhsE'
, 'Twnhs'
, 'Duplex'
, 'fam2'
, 'KTA'
, 'KGD'
, 'KEx'
, 'KFa'
)
knitr::kable(tierdf, caption = "Neighborhood tiers,base category > 90")
knitr::kable(Lotconfigdf, caption = "Lot configuration indicator variables; base category: Inside Lot")
knitr::kable(Bldgtypedf, caption = "Building type indicator variables; base category: single family")
knitr::kable(KitchenQualdf, caption = "Kitchen Quality indicator variables; base category: poor")
# Get sample frame.
SampleFrame <- ames %>%
dplyr::filter(DropCondition == '99: Eligible Sample') %>%
dplyr::select_(.dots = colsofinterest)
SampleFrame <- SampleFrame %>%
dplyr::mutate(TotalBath = BsmtFullBath + BsmtHalfBath + FullBath + HalfBath) %>%
dplyr::mutate(TotalSQFT = TotalBsmtSF + FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(SQFTNoBsmt = FirstFlrSF + SecondFlrSF) %>%
dplyr::mutate(QualityIndex = OverallQual*OverallCond) %>%
dplyr::mutate(YearMonthSold = YrSold + MoSold/100) %>%
dplyr::mutate(u = runif(nrow(SampleFrame)))
# -----------------------------Grouping Neighborhoods-----------------------------------------------
NeighborhoodGrps <- SampleFrame %>%
dplyr:: select(Neighborhood,SalePrice,TotalSQFT) %>%
dplyr::group_by(Neighborhood) %>%
dplyr::summarise(TotalSalePrice = sum(SalePrice), Total.SQFT = sum(TotalSQFT),PricePerSqFt = TotalSalePrice/Total.SQFT)
Less60Neigh <- NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt <= 60)]
Bet60_70 <-  NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt <= 70 & NeighborhoodGrps$PricePerSqFt > 60 )]
Bet70_80 <-  NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt <= 80 & NeighborhoodGrps$PricePerSqFt > 70 )]
Bet80_90 <-   NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt <= 90 & NeighborhoodGrps$PricePerSqFt > 80)]
Greater_90 <-   NeighborhoodGrps$Neighborhood[which(NeighborhoodGrps$PricePerSqFt > 90)]
SampleFrame$Tier1 <- ifelse(SampleFrame$Neighborhood %in% Less60Neigh,1,0)
SampleFrame$Tier2 <- ifelse(SampleFrame$Neighborhood %in% Bet60_70,1,0)
SampleFrame$Tier3 <- ifelse(SampleFrame$Neighborhood %in% Bet70_80, 1,0)
SampleFrame$Tier4 <- ifelse(SampleFrame$Neighborhood %in% Bet80_90, 1,0)
#SampleFrame$Tier5 <- ifelse(SampleFrame$Neighborhood %in% Greater_90, 1,0)
tierdf <- data.frame(Tier = c(1,2,3,4,5), `Price per sq.ft` = c("<= 60", "> 60 and <= 70", "> 70 and <= 80", "> 80 and <= 90", " > 90"))
#-------------------------------------------------------------------------------------------------------
#------------------------------Creating indicator variables --------------------------------------------
# IV for LotConfig, base Inside lot
SampleFrame$CornerLot <- ifelse(SampleFrame$LotConfig == "Corner",1,0)
SampleFrame$CulDSac <- ifelse(SampleFrame$LotConfig == "CulDSac",1,0)
SampleFrame$Frontal2 <- ifelse(SampleFrame$LotConfig == "FR2",1,0)
SampleFrame$Frontal3 <- ifelse(SampleFrame$LotConfig == "F3",1,0)
Lotconfigdf <- data.frame(Indicator = c("CornerLot", "CulDSac", "Frontal2", "Frontal3"), Description = c("Corner lot", "CulDSac Lot", "2 frontal lot", "3 frontal lot") )
# IV for BlgType, base "1Fam"
SampleFrame$TwnhsE <- ifelse(SampleFrame$BldgType == "TwnhsE",1,0)
SampleFrame$Twnhs <- ifelse(SampleFrame$BldgType == "Twnhs", 1,0)
SampleFrame$Duplex <- ifelse(SampleFrame$BldgType == "Duplex", 1,0)
SampleFrame$fam2 <- ifelse(SampleFrame$BldgType == "2famCon",1,0)
Bldgtypedf <- data.frame(Indicator = c("TwnhsE","Twnhs","Duplex","fam2"),Decription = c("Townhouse", "Twin house", "Duplex", "2 family conversion"))
# IV for SaleCondition, bae "Normal"
SampleFrame$PartialSaleCond <- ifelse(SampleFrame$SaleCondition == "Partial",1,0)
# IV for KitchenQual
SampleFrame$KTA <- ifelse(SampleFrame$KitchenQual == "TA", 1,0)
SampleFrame$KGD <- ifelse(SampleFrame$KitchenQual == "Gd", 1,0)
SampleFrame$KEx <- ifelse(SampleFrame$KitchenQual == "Ex", 1,0)
SampleFrame$KFa <- ifelse(SampleFrame$KitchenQual == "Fa", 1,0)
KitchenQualdf <- data.frame(Indicator = c("KTA", "KGD", "KEx", "KFa"),Decription = c("Typical/Average", "Good", "Excellent", "Fair"))
# --------------------------------------------------------------------------------------------------------------
Predictors <- c('LotArea'
,'YearRemodel'
, 'TotalBsmtSF'
, 'GrLivArea'
, 'TotalBath'
, 'TotalSQFT'
, 'QualityIndex'
, 'TotRmsAbvGrd'
, 'GarageArea'
, 'YearMonthSold'
, 'Tier1'
, 'Tier2'
, 'Tier3'
, 'Tier4'
, 'PartialSaleCond'
, 'CornerLot'
, 'CulDSac'
, 'Frontal2'
# , 'Frontal3'
, 'TwnhsE'
, 'Twnhs'
, 'Duplex'
#,'fam2'
, 'KTA'
, 'KGD'
, 'KEx'
# , 'KFa'
)
# training set
#train <- dplyr::sample_n(SampleFrame,size = trainPercent*nrow(SampleFrame), replace = F,set.seed(2000))
set.seed(2000)
train <- subset(SampleFrame , u < 0.7)
train <- train %>% dplyr::arrange(SID)
train.Clean <- train %>% dplyr::select(c(Predictors,'SalePrice'))
# Validation set
#Validation <- dplyr::sample_n(SampleFrame,size = (1-trainPercent)*nrow(SampleFrame), replace = F, set.seed(2000))
Validation <- subset(SampleFrame, u > 0.7)
Validation <- Validation %>% dplyr::arrange(SID)
# Check row counts
df <- cbind(Data = c("Training set", "Validation set","Total"), Samples = c(nrow(train),nrow(Validation),nrow(train) + nrow(Validation)))
knitr::kable(df,align = c("l","r"),caption = "Training and Validation sampling")
knitr::kable(matrix(Predictors,ncol = 4), caption = "Predictors for linear regression models")
# upper model as full model
upper.lm <- lm(data = train.Clean,SalePrice ~ .)
coefs <- round(coefficients(upper.lm),2)
signs <- ifelse(sign(coefs)==1,"+", "-")
Betas <- paste(abs(coefs[2:length(coefs)]),"*",Predictors)
uppereqn <- paste("SalePrice = ",paste(coefs[1],paste(paste(signs[2:24], Betas),collapse = " ")))
options(scipen = 0)
summary(upper.lm)
# lower model as the intercept model
lower.lm <- lm(data = train.Clean, SalePrice ~ 1)
# print summary for InterceptModel
summary(lower.lm)
# model to initate a stepwise regression
sqft.lm <- lm(data = train.Clean, SalePrice ~ TotalSQFT)
coef_IM <- round(coef(sqft.lm),2)
signs_IM <- ifelse(sign(coef_IM)==1,"+","-")
Betas_IM <- paste(abs(coef_IM[2:length(coef_IM)]),"*","TotalSQFT")
lowereqn <- paste("SalePrice = ",paste(coef_IM[1],paste(paste(signs_IM[2:2], Betas_IM),collapse = " ")))
summary(sqft.lm)
# forward selection
forward.lm <- MASS::stepAIC(object = lower.lm,scope = list(upper = formula(upper.lm), lower = ~1), direction = "forward",trace = F)
coef_Fwd <- round(coef(forward.lm),2)
signs_Fwd <- ifelse(sign(coef_Fwd)==1,"+","-")
formula_Fwd <- as.character(formula(forward.lm))[3]
predictors_Fwd <- unlist(strsplit(formula_Fwd, split = "+",fixed = T))
Betas_Fwd <- paste(abs(coef_Fwd[2:length(coef_Fwd)]),"*",predictors_Fwd)
fwdeqn <- paste("SalePrice = ",paste(coef_Fwd[1],paste(paste(signs_Fwd[2:length(signs_Fwd)], Betas_Fwd),collapse = " ")))
options(scipen = 0)
summary.lm(forward.lm)
# Backward selection
backward.lm <- MASS::stepAIC(object = upper.lm, direction = "backward",trace = F)
coef_Bwd <- round(coef(backward.lm),2)
signs_Bwd <- ifelse(sign(coef_Bwd)==1,"+","-")
formula_Bwd <- as.character(formula(backward.lm))[3]
predictors_Bwd <- unlist(strsplit(formula_Bwd, split = "+",fixed = T))
Betas_Bwd <- paste(abs(coef_Bwd[2:length(coef_Bwd)]),"*",predictors_Bwd)
Bwdeqn <- paste("SalePrice = ",paste(coef_Bwd[1],paste(paste(signs_Bwd[2:length(signs_Bwd)], Betas_Bwd),collapse = " ")))
summary.lm(backward.lm)
# stepwise
stepwise.lm <- MASS::stepAIC(object = sqft.lm,scope = list(upper = formula(upper.lm), lower = ~1),direction = "both", trace = F)
coef_Stp <- round(coef(stepwise.lm),2)
signs_Stp <- ifelse(sign(coef_Stp)==1,"+","-")
formula_Stp <- as.character(formula(stepwise.lm))[3]
predictors_Stp <- unlist(strsplit(formula_Stp, split = "+",fixed = T))
Betas_Stp <- paste(abs(coef_Stp[2:length(coef_Stp)]),"*",predictors_Stp)
Stpeqn <- paste("SalePrice = ",paste(coef_Stp[1],paste(paste(signs_Stp[2:length(signs_Stp)], Betas_Stp),collapse = " ")))
summary(stepwise.lm)
#junkmodel
junk.lm <- lm(SalePrice ~ OverallQual + OverallCond + QualityIndex + GrLivArea + TotalSQFT, data = train)
coef_Jnk <- round(coef(junk.lm),2)
signs_Jnk <- ifelse(sign(coef_Jnk)==1,"+","-")
formula_Jnk <- as.character(formula(junk.lm))[3]
predictors_Jnk <- unlist(strsplit(formula_Jnk, split = "+",fixed = T))
Betas_Jnk <- paste(abs(coef_Jnk[2:length(coef_Jnk)]),"*",predictors_Jnk)
Jnkeqn <- paste("SalePrice = ",paste(coef_Jnk[1],paste(paste(signs_Jnk[2:length(signs_Jnk)], Betas_Jnk),collapse = " ")))
summary(junk.lm)
# VIF
JunkVIF <- as.data.frame(sort(car::vif(junk.lm),decreasing = T))
JunkVIF$Model <- "Junk"
JunkVIF$Predictors <- row.names(JunkVIF)
colnames(JunkVIF) <- c("VIF","Model", "Predictors")
forwardVIF <- as.data.frame(sort(car::vif(forward.lm),decreasing = T))
forwardVIF$Model <- "Forward Selection"
forwardVIF$Predictors <- row.names(forwardVIF)
colnames(forwardVIF) <- c("VIF","Model", "Predictors")
backwardVIF <- as.data.frame(sort(car::vif(backward.lm),decreasing = T))
backwardVIF$Model <- "Backward Elimination"
backwardVIF$Predictors <- row.names(backwardVIF)
colnames(backwardVIF) <- c("VIF","Model", "Predictors")
stepwiseVIF <- as.data.frame(sort(car::vif(stepwise.lm),decreasing = T))
stepwiseVIF$Model <- "Stepwise"
stepwiseVIF$Predictors <- row.names(stepwiseVIF)
colnames(stepwiseVIF) <- c("VIF","Model", "Predictors")
VIF <- rbind(JunkVIF,forwardVIF,backwardVIF,stepwiseVIF,row.names = F)
VIF <- VIF[,c("Model","Predictors", "VIF")]
VIFReport <- VIF[1:nrow(VIF)-1,] %>% dplyr::group_by(Model) %>%
dplyr::top_n(n =5,wt = VIF)
#colnames(VIF) <- c("Predictor","VIF", "Model")
knitr::kable(VIFReport,"latex",caption = "VIF - Top 5 my model") %>%
kableExtra::kable_styling(latex_options = "striped") %>%
kableExtra::collapse_rows(columns = 1)
junkmetrics <- broom::glance(junk.lm)
junkmodel <- broom::augment(junk.lm)
junkmetrics$MAE <- mean(abs(junkmodel$.resid))
junkmetrics$MSE <- mean(junkmodel$.resid ^2)
forwardmetrics <- broom::glance(forward.lm)
forwardmodel <- broom::augment(forward.lm)
forwardmetrics$MAE <- mean(abs(forwardmodel$.resid))
forwardmetrics$MSE <- mean(forwardmodel$.resid ^2)
backwardmetrics <- broom::glance(backward.lm)
backwardmodel <- broom::augment(backward.lm)
backwardmetrics$MAE <- mean(abs(backwardmodel$.resid))
backwardmetrics$MSE <- mean(backwardmodel$.resid ^2)
stepwisemetrics <- broom::glance(stepwise.lm)
stepwisemodel <- broom::augment(stepwise.lm)
stepwisemetrics$MAE <- mean(abs(stepwisemodel$.resid))
stepwisemetrics$MSE <- mean(stepwisemodel$.resid ^2)
comparison <- rbind(junkmetrics,forwardmetrics,backwardmetrics,stepwisemetrics)
comparison$model <- c("Junk", "Forward Selection", "Backward Elimination", "Stepwise")
comparison <- comparison %>%
dplyr::select(model,adj.r.squared,AIC,BIC,MSE, MAE)
View(comparison)
